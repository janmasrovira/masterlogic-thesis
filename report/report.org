#+latex_compiler: xelatex
#+latex_class: article
#+title: Interpretability logics
#+author: Jan Mas Rovira
#+subtitle: Master's thesis

#+latex_header: \usepackage{unicode-math}
#+latex_header: \usepackage{fontspec}
#+latex_header: \usepackage[x11names, table]{xcolor}
#+latex_header: \usepackage[margin=2.5cm]{geometry}
#+latex_header: \usepackage{lmodern}
#+latex_header: \setmonofont{FreeMono}
#+latex_header: \usepackage{cancel}
#+latex_header: \usepackage{amsthm}
#+latex_header: \usepackage{float}
#+latex_header: \usepackage{newunicodechar}
#+latex_header: \usepackage[toc,indexonlyfirst,docdef=restricted]{glossaries-extra}
#+latex_header: \usepackage[style=ieee]{biblatex}

#+latex_header: \bibliography{refs}
#+latex_header: \makeglossaries

#+latex_header: \hypersetup{colorlinks=true,urlcolor=DodgerBlue4,linkcolor=Firebrick4,citecolor=Green4}
#+latex_header: \newcommand{\ie}[0]{i.e.\ }
#+latex_header: \newcommand{\todo}[0]{\textcolor{red}{pending}}
#+latex_header: \newcommand{\pend}[0]{\textcolor{Tomato3}{pending }}
#+latex_header: \newcommand{\ok}[0]{\textcolor{DeepSkyBlue4}{solved }}
#+macro: red @@latex:{\color{red}@@$1@@latex:}@@

#+macro: begindef @@latex:\begin{definition}@@
#+macro: enddef @@latex:\end{definition}@@

#+macro: begincoro @@latex:\begin{corollary}@@
#+macro: endcoro @@latex:\end{corollary}@@

#+macro: beginremark @@latex:\begin{remark}@@
#+macro: endremark @@latex:\end{remark}@@

#+macro: begintheorem @@latex:\begin{theorem}@@
#+macro: endtheorem @@latex:\end{theorem}@@

#+macro: beginlemma @@latex:\begin{lemma}@@
#+macro: endlemma @@latex:\end{lemma}@@

#+macro: beginproof @@latex:\begin{proof}@@
#+macro: endproof @@latex:\end{proof}@@


#+macro: defglossary @@latex:\newglossaryentry{$1}{name=$2,description={$3}}@@
#+macro: defacronym @@latex:\newacronym{$1}{$2}{$3}@@


#+latex_header: \newtheorem{theorem}{Theorem}
#+latex_header: \theoremstyle{definition}
#+latex_header: \newtheorem{corollary}[theorem]{Corollary}
#+latex_header: \theoremstyle{definition}
#+latex_header: \newtheorem{lemma}[theorem]{Lemma}
#+latex_header: \theoremstyle{definition}
#+latex_header: \newtheorem{definition}[theorem]{Definition}
#+latex_header: \theoremstyle{definition}
#+latex_header: \newtheorem{remark}[theorem]{Remark}

#+latex_header: \newglossaryentry{agdaprf}{name={\includegraphics[height=\baselineskip]{img/agda}},description={A proof formalized in Agda}}

{{{defglossary(gvm,model,Generalized Veltman model)}}}
{{{defglossary(gvf,frame,Generalized Veltman frame)}}}
{{{defglossary(ovf,frame,Ordinary Veltman frame)}}}
{{{defglossary(ovm,model,Ordinary Veltman model)}}}
{{{defglossary(forcing-gen,{\ensuremath{‚ä©^{gen}_M}},Forcing relation for generalized semantics)}}}
{{{defglossary(forcing-ord,{\ensuremath{‚ä©^{ord}_M}},Forcing relation for ordinary semantics)}}}
{{{defglossary(choice-set,choice set,Choice set)}}}
{{{defglossary(noetherian,Noetherian,Conversely well-founded relation)}}}
#+latex_header: \newglossaryentry{dependent-pair}{name={dependent pair},description={A pair in which the type of the second component is indexed by the first component}}
#+latex_header: \newglossaryentry{sum type}{name={sum type},description={A disjunction of two ore more types}}
#+latex_header: \newglossaryentry{decidable model}{name={decidable model},description={A model whose forcing relation is decidable}}
#+latex_header: \newglossaryentry{Rel}{name={\texttt{Rel}},description={Homogeneous relation}}
#+latex_header: \newglossaryentry{REL}{name={\texttt{REL}},description={Heterogeneous relation}}
#+latex_header: \newglossaryentry{Pred}{name={\texttt{Pred}},description={A predicate or a subset}}

#+macro: agda @@latex:\gls{agdaprf}\glsadd{agdaprf}@@

# Missing monospaced characters
#+latex_header: \setmathfont{XITS Math}
#+latex_header: \newfontfamily{\myfont}{XITS Math}
#+latex_header: \newunicodechar{ùïé}{\makebox[1em]{\myfontùïé}}
#+latex_header: \newunicodechar{ÔΩõ}{\ensuremath{\{}}
#+latex_header: \newunicodechar{ÔΩù}{\ensuremath{\}}}
#+latex_header: \setmathfont{Latin Modern Math}

* Introduction
** Overview of interpretability logics
** Original contributions
   This work includes the following original contributions:
   1. Generalized frame condition for $R‚ÇÅ$ (in collaboration with Luka). [[theorem:R‚ÇÅ][Link]].
   2. Generalized frame condition for $R‚Åø$. [[theorem:R‚Åø][Link]].

** Language
   <<sec:language>>
   The language of interpretability logics is $‚ä•,‚Üí,‚ñ∑$. We define $‚àß,‚ñ°,‚ô¢,‚à®,‚Üí$.

** Notation
   Some notation that we use throughout the report:
   1. $wRuRv$ iff $wRu$ and $uRv$;
   2. $wRuS_xv$ iff $wRu$ and $uS_xv$;
   3. $wRu‚ä©A$ iff $wRu$ and $u‚ä©A$;
   4. $Y‚ä©A$ iff for all $y‚ààY$ we have $y‚ä©A$;
   5. $Y‚äÆA$ iff there is some $y‚ààY$ such that $y‚äÆA$;
   6. $xS_wY‚ä©A$ iff $xS_wY$ and $Y‚ä©A$;
   7. $‚ü¶A‚üß‚âî\{w:w‚ä©A\}$;
   8. {{{agda}}} this is Agda's logo, and every proof that is formalized in Agda
      has been tagged with it.
   9. When we write a dot after the quantification of some variables, the scope of
      the variables extends to the rightmost part of what follows. Hence the
      formula  $‚àÄx‚àÉy.Pxy‚àß‚àÄz.Pyz$ is equivalent to $‚àÄx‚àÉy(Pxy‚àß‚àÄz(Pyz))$

** Semantics
   In this document we consider two variants of relational semantics for
   interpretability logic similar to Kripke semantics for other modal logics.

*** Ordinary Veltman semantics
    {{{begindef}}} <<def:ordinary-frames>>
    cite:modal-matters An ordinary Veltman \gls{ovf} $F=‚ü®W,R,S‚ü©$ is a
    structure constituted by a set of worlds $W$, a binary relation $R‚äÜW¬≤$ and a
    ternary relation $S‚äÜW√óW√óW$. We write $wRu$ instead of $‚ü®w,u‚ü©‚ààR$ and $uS_wv$
    instead of $‚ü®w,u,v‚ü©‚ààS$. The structure must satisfy the following conditions:

    1. $R$ is a transitive;
    2. $R$ is conversely well-founded. That is, there is no infinite ascending
       chain $w‚ÇÅRw‚ÇÇR‚Ä¶$;
    3. if $uS_wv$ then $wRu$ and $wRv$;
    4. if $wRu$ then $uS_wu$;
    5. if $wRu$ and $uRv$ then $uS_wv$.
    6. for every $w$, $S_w$ is transitive;
    {{{enddef}}}


    {{{begindef}}} An ordinary Veltman \gls{ovm} $M=‚ü®F,V‚ü©$ is a structure
    constituted by an ordinary Veltman frame $F$ and a valuation $V‚äÜW√óVar$. If
    $F=‚ü®W,R,S‚ü©$ we will write $M=‚ü®W,R,S,V‚ü©$ instead of $M=‚ü®‚ü®W,R,S‚ü©,V‚ü©$. {{{enddef}}}

    {{{begindef}}}
    <<def:ord-forcing>>
    Given a model $M$, we define a forcing relation $\gls{forcing-ord}‚äÜW √ó Fm$. We write
    $M,w‚ä©A$ instead of $‚ü®w,A‚ü©‚àà\gls*{forcing-ord}$ or simply $w‚ä©A$ when the model is clear by
    the context. We write $w‚äÆA$ when $‚ü®w,A‚ü©‚àâ‚ä©_M$.
    1. $w‚äÆ‚ä•$;
    2. if $x‚ààVar$, then $w‚ä©x$ iff $‚ü®w,x‚ü©‚ààV$;
    3. if $A,B‚ààFm$, then $w‚ä©A‚ÜíB$ iff if $w‚ä©A$ then $w‚ä©B$;
    4. if $A,B‚ààFm$, then $w‚ä©A‚ñ∑B$ iff if $wRu$ and $u‚ä©A$ then there exists $v$ such
       that $v‚ä©B$ and $uS_wv$.
    {{{enddef}}}

    If $F$ is an ordinary Veltman frame and $A$ a formula, we write $F‚ä©A$ do
    denote that for every valuation we have $‚ü®F,V‚ü©‚ä©A$.

    {{{begincoro}}}
    It immediately follows that:
    1. If $A,B‚ààFm$, then $w‚ä©A‚àß(‚à®)B$ iff $w‚ä©A$ and (or) $w‚ä©B$;
    2. if $A‚ààFm$, then $w‚ä©¬¨A$ iff $w‚äÆA$;
    3. if $A‚ààFm$, then $w‚ä©‚ô¢A$ iff there exists $u$ such that $wRu$ and $u‚ä©A$;
    4. if $A‚ààFm$, then $w‚ä©‚ñ°A$ iff for every $u$ such that $wRu$ we have $u‚ä©A$.
    {{{endcoro}}}
    {{{beginproof}}}
    {{{agda}}}
    {{{endproof}}}

*** Generalized Veltman semantics
    {{{begindef}}} cite:mikec2019interpretability A generalized Veltman \gls{gvf}
    $F=‚ü®W,R,S‚ü©$ is a structure constituted by a set of worlds $W$, a binary
    relation $R‚äÜW¬≤$ and a ternary relation $S‚äÜW√óW√ó(ùí´(W)‚àñ\{‚àÖ\})$. We write $wRu$
    instead of $‚ü®w,u‚ü©‚ààR$ and $uS_wY$ instead of $‚ü®w,u,Y‚ü©‚ààS$. The structure must
    satisfy the following conditions :

    1. $R$ is a transitive; <<R-trans>>
    2. $R$ is conversely well-founded. That is, there is no infinite ascending
       chain $w‚ÇÅRw‚ÇÇR‚Ä¶$;
    3. if $uS_wY$ then $wRu$ and for all $y‚ààY$ we have $wRy$;
    4. if $wRu$ then $uS_w\{u\}$;
    5. if $wRu$ and $uRv$ then $uS_w\{v\}$;
    6. if $uS_wY$ and $yS_wZ_y$ for all $y‚ààY$, then $uS_w\left(‚ãÉ_{y‚ààY}Z_y\right)$.
    # 7. $S$ is monotone in the following sense: if $uS_wV‚äÜZ‚äÜ\{u:wRu\}$ then
    #    $uS_wZ$.
    {{{enddef}}}

    {{{begindef}}}
    <<def:gen-frame>>
    A generalized Veltman \gls{gvm} $M=‚ü®F,V‚ü©$ is a structure
    constituted by a generalized Veltman \gls{gvf} $F$ and a valuation $V‚äÜW√óVar$.
    {{{enddef}}}
    {{{begindef}}}
    Given a model $M$, we define a forcing relation $\gls{forcing-gen}_M‚äÜW √ó
    Fm$. We use the same notation conventions as in the ordinary semantics.
    1. $w‚äÆ‚ä•$;
    2. if $x‚ààVar$, then $w‚ä©x$ iff $‚ü®w,x‚ü©‚ààV$;
    3. if $A,B‚ààFm$, then $w‚ä©A‚ÜíB$ iff if $w‚ä©A$ then $w‚ä©B$;
    4. if $A,B‚ààFm$, then $w‚ä©A‚ñ∑B$ iff if $wRu$ and $u‚ä©A$ then there exists $Y$ such
       that $Y‚ä©B$ and $uS_wY$. When we write $Y‚ä©B$ we mean that for all $y‚ààY$ we
       have $y‚ä©B$;
    {{{enddef}}}

    If $F$ is a generalized Veltman frame and $A$ a formula, we write $F‚ä©A$ do
    denote that for every valuation we have $‚ü®F,V‚ü©‚ä©A$.

    {{{begincoro}}}
    It immediately follows that:
    1. If $A,B‚ààFm$, then $w‚ä©A‚àß(‚à®)B$ iff $w‚ä©A$ and (or) $w‚ä©B$.
    2. If $A‚ààFm$, then $w‚ä©¬¨A$ iff $w‚äÆA$.
    3. If $A‚ààFm$, then $w‚ä©‚ô¢A$ iff there exists $u$ such that $wRu$ and $u‚ä©A$.
    4. If $A‚ààFm$, then $w‚ä©‚ñ°A$ iff for every $u$ such that $wRu$ we have $u‚ä©A$.
    {{{endcoro}}}
    {{{beginproof}}}
    {{{agda}}}
    {{{endproof}}}

** Monotonicity
   Consider the following monotonicity condition:

  #+begin_center
    if $uS_wV‚äÜZ‚äÜ\{u:wRu\}$ then $uS_wZ$.
  #+end_center

  {{{begintheorem}}} Let $M=‚ü®W,R,S,V‚ü©$ be a generalized Veltman model and let
  $M'=‚ü®W,R,S',V‚ü©$ where $S'$ is the monotonic closure of $S$.
  \[S'‚âî\{‚ü®w,x,Y'‚ü© : ‚ü®w,x,Y‚ü©‚ààS, Y‚äÜY'‚äÜ\{u:wRu\}\}\]

  Then for any world $w$ and formula $A$ we have \[M,w‚ä©A‚áîN,w‚ä©A\]
  {{{endtheorem}}}

  {{{beginproof}}} By induction on $A$. The only interesting case is $A‚ñ∑B$.
  - Assume that $M,w‚ä©A‚ñ∑B$ and that there is some world $x$ such that $wRx$ and
    $M',x‚ä©A$. By IH we have $M,x‚ä©A$, so there exists some $Y$ such that $xS_wY$
    and $M,Y‚ä©B$. By IH we have $M',Y‚ä©B$ and by definition of $S'$ it follows
    that $xS'_wY$, therefore $M',w‚ä©A‚ñ∑B$.
  - Assume that $M,w‚äÆA‚ñ∑B$. It follows that there is some $x$ such that $wRx$,
    $M,x‚ä©A$ and $(‚ãÜ)\ ‚àÄY(xS_wY‚áíM,Y‚äÆB)$. We want to prove that
    $‚àÄY'(xS'_wY'‚áíM',Y'‚äÆB)$. Assume that for some $Y'$ we have $xS'_wY'$, by
    definition of $S'$ it follows there exists some $Y$ such that $Y‚äÜY'$ and
    $xS_wY$. Hence by $(‚ãÜ)$ we have that $M,Y‚äÆB$ and thus there exists $y‚ààY$
    such that $M,y‚äÆB$. By IH we get that $M',y‚äÆB$ and since $y‚ààY‚äÜY'$ we have
    $Y'‚äÆB$, so $M',w‚ä©A‚ñ∑B$.
  {{{endproof}}}

  As a consequence of the previous theorem it is sometimes the case that
  generalized Veltman frames are assumed to satisfy the monotonicity condition,
  as it can make some proofs shorter.

  {{{beginremark}}} As Luka pointed out during online correspondence, there is a
  subtlety that is worth mentioning: It is not the same to take the monotone
  closure of $S$ as to assume that monotonicity is required by definition. In
  the latter case it may interact with quasi-transitivity and change the forcing
  relation. Consider the following example:

   #+caption: Example frame: $wRv_{0‚Ä¶3}$, $v_0S_w\{v_1\}$, $v_2S_w\{v_3\}$.
   #+name: fig:example-trans
   #+attr_latex: :float t :width 0.28\textwidth :placement [H]
   [[file:img/example-trans.pdf]]

  Let $M$ be a model based on the frame displayed in figure [[fig:example-trans]]
  such that $‚ü¶p‚üß = \{v_0\}$, $‚ü¶q‚üß = \{v_2\}$. We see that $w‚ä©¬¨(p ‚ñ∑ q)$ as
  $p$ is only true in $v_0$ and we only have $v_0S_w\{v_1\}$ with $v_1‚äÆq$. If we
  take the monotonic closure of $S$ we have $v_0S_w \{v_1, v_2\}$ and by
  quasi-transitivity 8 (see [[sec:trans]]) we get $v_0S_w \{v_3\}$ and consequently
  $w‚ä©¬¨(p ‚ñ∑ q)$ is no longer true.

  {{{endremark}}}

** Transitivity
   <<sec:trans>>
 \begin{center}
 \begin{tabular}{l|c|l}
 Nr. & Semantic requirement for transitivity &\ \ \ \ mentioned in \\
  \hline
 (1) & $uS_xY ‚Üí ‚àÄ \, \{ Y_y\}_{y‚àà Y} \Big((‚àÄ\, y‚ààY\ yS_xY_y) ‚Üí ‚àÉ Z\ (Z‚äÜ ‚ãÉ_{y‚àà Y}Y_y ‚àß uS_xZ)\Big)$ &  This paper\\
  \hline
 (2) & $uS_xY ‚Üí ‚àÄ \, \{ Y_y\}_{y‚àà Y} \Big((‚àÄ\, y‚ààY\ yS_xY_y) ‚Üí uS_x‚ãÉ_{y‚àà Y}Y_y\Big)$ &  De Jongh?\\
  \hline
 (3) &$uS_xY ‚Üí ‚àÉ\, y‚ààY\, ‚àÄ Y'(yS_xY' ‚Üí ‚àÉ \, Y''{‚äÜ}Y' ‚àß uS_xY'')$ & This paper \\
  \hline
 (4) &$uS_xY ‚Üí ‚àÉ\, y‚ààY\, ‚àÄ Y'(yS_xY' ‚Üí uS_xY')$ & Joosten '98 \cite{Joosten:1998:MasterThesis}, p.43  \\
 \hline
 (5) &$uS_xY ‚Üí ‚àÄ\, y‚ààY\, ‚àÄ Y'(yS_xY' ‚Üí ‚àÉ \, Y''{‚äÜ}Y' ‚àß uS_xY'')$ & This paper  \\
 \hline
 (6) & $uS_xY ‚Üí ‚àÄ\, y‚ààY\, ‚àÄ Y'(yS_xY' ‚Üí uS_xY')$ & Verbrugge '92 \cite{Verbrugge}  \\
 \hline
 (7) & $uS_xY ‚Üí ‚àÄ\, y‚ààY\, ‚àÄ Y'(yS_xY'\wedge y‚àâY' ‚Üí ‚àÉ \, Y''{‚äÜ}Y'\ uS_xY'')$ & This paper   \\
 \hline
 (8) & $uS_xY ‚Üí ‚àÄ\, y‚ààY\, ‚àÄ Y'(yS_xY'\wedge y‚àâY' ‚Üí uS_xY')$ & Goris, Joosten '09 \cite{GorisJoosten:2011:ANewPrinciple}, p6, \cite{Joosten:2004:InterpretabilityFormalized}   \\
 \end{tabular}
 \end{center}

 {{{begintheorem}}} Let $F$ be a generalized Veltman frame. The following is true.
   1. Monotone ‚Üí Trans-1 ‚Üí Trans-2
   2. Trans-2 ‚Üí Trans-1
   3. Monotone ‚Üí Trans-3 ‚Üí Trans-4
   4. Trans-4 ‚Üí Trans-3
   5. Trans-5 ‚Üí Trans-1
   6. Monotone ‚Üí Trans-5 ‚Üí Trans-2
   7. Trans-5 ‚Üí Trans-3
   8. Monotone ‚Üí Trans-5 ‚Üí Trans-4
   9. Monotone ‚Üí Trans-5 ‚Üí Trans-6
   10. Trans-5 ‚Üí Trans-7
   11. Monotone ‚Üí Trans-5 ‚Üí Trans-8
   12. Trans-6 ‚Üí Trans-1
   13. Monotone ‚Üí Trans-6 ‚Üí Trans-2
   14. Trans-6 ‚Üí Trans-3
   15. Trans-6 ‚Üí Trans-4
   16. Trans-6 ‚Üí Trans-5
   17. Trans-6 ‚Üí Trans-7
   18. Trans-6 ‚Üí Trans-8
   19. Monotone ‚Üí Trans-7 ‚Üí Trans-8
   20. Trans-8 ‚Üí Trans-7
 {{{endtheorem}}}
 {{{beginproof}}}
 {{{agda}}}
 {{{endproof}}}
 {{{begintheorem}}}
 {{{agda}}}
 Soundness for 1-8
 {{{endtheorem}}}

 {{{begintheorem}}} Given an ordinary Veltman model $M=‚ü®W,R,S,V‚ü©$ we can find some
 generalized Veltman model $M'=‚ü®W,R,S',V‚ü©$ satisfying transitivity
 $i‚àà\{1‚Ä¶8\}$ such that for every world $w$ and formula $A$ \[M,w‚ä©A‚áîM',w‚ä©A\]
 {{{endtheorem}}}

 {{{beginproof}}} We prove it for the transitivity condition 2 (the rest can be
 proven in the same way). Consider an $M'$ with $S'$ defined thus
 \[S'‚âî\{‚ü®w,x,\{y\}‚ü©:‚ü®w,x,y‚ü©‚ààS\}\] It is easy to observe that $M'$ satisfies
 conditions $1‚Ä¶5$ from definition [[def:gen-frame]]. It is also easy to see that it
 satisfies transitivity 2. We show that they prove the same formulas by
 induction on the formula. The only interesting case is $A‚ñ∑B$.
   - Assume $M,w‚ä©A‚ñ∑B$ and that for some $x$ we have $wRx‚ä©A$, it follows that
     there exists some $y$ such that $xS_wy‚ä©B$. By definition of $M'$ we have
     $xS_w\{y\}$ and also $\{y\}‚ä©B$, therefore $M',w‚ä©A‚ñ∑B$.
   - Assume $M,w‚äÆA‚ñ∑B$, then there exists some $x$ such that $wRx‚ä©A$ and
     $‚àÄy(xS_wy‚áíy‚äÆB)$. It is obvious that for $M'$ we have $‚àÄy(xS_w\{y\}‚áíy‚äÆB)$
     and also $‚àÄY(xS_wY‚áíY‚äÆB)$, which is the required property.
 {{{endproof}}}

** Logic $IL$
   The logic $IL$ encompasses all classical tautologies in the new language plus
   the following axiom schemes:
   - K: $‚ñ° (A ‚Üí B) ‚Üí ‚ñ° A ‚Üí ‚ñ° B$
   - J1: $‚ñ° (A ‚Üí B) ‚Üí A ‚ñ∑ B$
   - J2: $A ‚ñ∑ B ‚àß B ‚ñ∑ C ‚Üí A ‚ñ∑ C$
   - J3: $(A ‚ñ∑ C ‚àß B ‚ñ∑ C) ‚Üí (A ‚à® B) ‚ñ∑ C$
   - J4: $A ‚ñ∑ B ‚Üí ‚ô¢ A ‚Üí ‚ô¢ B$
   - J5: $‚ô¢ A ‚ñ∑ A$
   Additionally it has the following rules:
   - Necessitation: if $‚ä¢_{IL}A$ then $‚ä¢_{IL}‚ñ°A$.
   - Modus ponens: if $Œ†‚ä¢_{IL}A‚ÜíB$ and $Œ†‚ä¢_{IL}A$ then $Œ†‚ä¢_{IL}B$.
   - Identity: If $A‚ààŒ†$ then $Œ†‚ä¢_{IL}A$.

  {{{begintheorem}}} *Local soundness for ordinary semantics*. That is, if
  $Œ†‚ä¢_{IL}A$ and $M$ is an ordinary model with a world $w$ such that
  $w‚ä©Œ†$, then $w‚ä©A$.
   {{{endtheorem}}}
   {{{beginproof}}}
   {{{agda}}}
   {{{endproof}}}

  {{{begintheorem}}} *Local soundness for generalized semantics*. That is, if
  $Œ†‚ä¢_{IL}A$ and $M$ is a generalized model with a world $w$ such that
  $w‚ä©Œ†$, then $w‚ä©A$.
   {{{endtheorem}}}
   {{{beginproof}}}
   {{{agda}}}
   {{{endproof}}}


\newpage
* Frame conditions
  A principle is a schema of formulas that carries some special significance.

  JOOST: OF COURSE, YOU WILL NEED SOME GENERAL BACKGROUND. WHAT DOES FRAME
  VALIDITY MEAN, WHAT ARE FRAME CONDITIONS, ETC.

  In this section we present a series of principles in conjunction with their
  respective frame conditions for ordinary semantics as well as generalized
  semantics.
** $M$ principle
   The $M$ principle reads as follows:
   \[A ‚ñ∑ B ‚Üí (A ‚àß ‚ñ° C) ‚ñ∑ (B ‚àß ‚ñ° C)\]

   JOOST: AT SOME STAGE YOU SHOULD BE GIVING CONTEXT HERE. WHEN WAS THE PRINCIPLE INTRODUCED AND BY WHOM. ALSO, WHY IS IT IMPORTANT, ETC.


*** Ordinary semantics
   The frame condition for $M$ for ordinary semantics, we write $M_{ord}$,
   reads as follows:
   \[‚àÄw,x,y,z(xS_w yRz ‚áí xRz)\]

   #+caption: Ordinary frame condition for $M$
   #+name: fig:ord-M-condition
   #+attr_latex: :float t :width 0.20\textwidth :placement [H]
   [[file:img/M-ord.pdf]]

   {{{begintheorem}}} For any ordinary frame $F$, we have that $F$ satisfies the
   $M_{ord}$ condition iff any model based on $F$ forces every instantiation of the $M$
   principle. In symbols:

   \[F ‚ä® M_{ord} ‚áî F ‚ä© M\] {{{endtheorem}}}

   JOOST: NOTE THAT YOUR MODELS SYMBOLS IS A BIT OVERLOADEN. YOU NOW USE IT IN
   THE SENSE WHERE F IS CONSIDERED A FIRST (OR HIGHER ORDER) STRUCTURE/MODEL.

   {{{beginproof}}}
   {{{agda}}}
   - \boxed{‚áí} Let $M$ be a model based on $F$ and let $w$ be any world. Assume
     that $w‚ä©A‚ñ∑B$ and that there is a world $x$ such that $wRx$ and $x‚ä©A‚àß‚ñ°C$.
     Our aim is to find a world $z$ such that $xS_wz‚ä©B‚àß‚ñ°C$. Since $wRx‚ä©A$ and
     $w‚ä©A‚ñ∑B$ there is a world $z$ such that $xS_wz‚ä©B$. We now show that $z‚ä©‚ñ°C$.
     Consider an arbitrary $u$ such that $zRu$. By the frame condition it
     follows that $xRz$ and we know $x‚ä©‚ñ°C$ hence $u‚ä©C$ and thus $z‚ä©‚ñ°C$. Hence
     $z$ is the desired world.

   - \boxed{‚áê} Let $a,b,c‚ààVar$, assume $F‚ä©a‚ñ∑b‚Üí(a‚àß‚ñ°c)‚ñ∑(b‚àß‚ñ°c)$. Assume also that
     for some $x,w,u$ we have $xS_wzRu$. Our goal is to prove $xRu$. Consider a
     model such that the following holds.
     \begin{flalign*}
     ‚ü¶a‚üß &= \{x\} \\
     ‚ü¶b‚üß &= \{z\} \\
     ‚ü¶c‚üß &= \{v:xRv\}
     \end{flalign*}
     We observe that $w‚ä©a‚ñ∑b$ because $a$ is only forced in $x$ and we have
     $xS_wz‚ä©b$. Then it follows that $w‚ä©(a‚àß‚ñ°c)‚ñ∑(b‚àß‚ñ°c)$. It is easy to observe
     that $x‚ä©a‚àß‚ñ°c$, furthermore we have that by definition of ordinary frame
     $xS_wz‚áíwRx$, hence $wRx$ and thus there must exist some $v$ such that
     $xS_wv‚ä©b‚àß‚ñ°c$. Since $b$ is only true in $z$ it must be $z‚ä©b‚àß‚ñ°c$. Then,
     because $zRu$ we have $u‚ä©c$, therefore $xRu$.
   {{{endproof}}}

*** Generalized semantics
   The frame condition for $M$ for generalized semantics, we write $M_{gen}$,
   reads as follows:

   \[ ‚àÄw,x,V(xS_wV‚áí ‚àÉV'‚äÜV(xS_wV',‚àÄv'‚ààV'‚àÄz(v'Rz‚áíxRz)))\]

   JOOST: I THINK LUKA HAS VERY NICE AND CONCISE NOTATION FOR THIS SO THAT
   FURTHERMORE IT BECOMES VERY CLEAR THAT THE GENERALISED IS VERY CLOSE TO THE
   REGULAR FRAME CONDITION. PLEASE ASK HIM.


   #+caption: Generalized frame condition for $M$
   #+name: fig:gen-M-condition
   #+attr_latex: :float t :width 0.20\textwidth :placement [H]
   [[file:img/wip.png]]

   {{{begintheorem}}} For any generalized frame $F$, we have that $F$ satisfies the
   $M_{gen}$ condition iff any model based on $F$ forces every instantiation of
   the $M$ principle. In symbols:

   \[F ‚ä® M_{gen} ‚áî F ‚ä© M\] {{{endtheorem}}}

   {{{beginproof}}}
   {{{agda}}}
   - \boxed{‚áí} Let $M$ be a model based on $F$ and let $w$ be any world. Assume
     that $w‚ä©A‚ñ∑B$ and that there is a world $x$ such that $wRx$ and $x‚ä©A‚àß‚ñ°C$.
     Our aim is to find a set $Z$ such that $xS_wZ‚ä©B‚àß‚ñ°C$. Since $wRx‚ä©A$ and
     $w‚ä©A‚ñ∑B$ there is set $Z$ such that $xS_wZ‚ä©B$. Then by the $M_{gen}$
     condition it follows that there is a world $Z'‚äÜZ$ such that $xS_wZ'$ and
     $‚àÄv‚ààZ'‚àÄz(vRz‚áíxRz)$. Now we show $Z'‚ä©‚ñ°C$. Let $v‚ààZ'$ and $u$ such that
     $vRu$, by the condition above it follows $xRu$ and since $x‚ä©‚ñ°C$ we have
     $u‚ä©C$. Hence $Z'$ is the desired set.
   - \boxed{‚áê} Let $a,b,c‚ààVar$ and assume $F‚ä©a ‚ñ∑ b ‚Üí (a ‚àß ‚ñ° c) ‚ñ∑ (b ‚àß ‚ñ° c)$ and
     $uS_wV$. Consider a model satisfying the following
     \begin{flalign*}
     ‚ü¶a‚üß &= \{u\} \\
     ‚ü¶b‚üß &= V \\
     ‚ü¶c‚üß &= \{v:uRv\}
     \end{flalign*}
     We see that $w‚ä©a‚ñ∑b$ since $a$ is only true in $u$ and we have $uS_wV‚ä©b$. It
     follows that ${w‚ä©(a ‚àß ‚ñ° c)‚ñ∑(b‚àß‚ñ°c)}$. It is easy to see that $u‚ä©a‚àß‚ñ°c$, hence
     there must exist $V'$ such that $uS_wV'‚ä©b‚àß‚ñ°c$. Clearly $V'‚äÜV$ since $b$ is
     forced exactly in $V$. Now let $v',z$ such that $v'‚ààV'$ and $v'Rz$. Since
     $v'‚ä©‚ñ°c$, then $z‚ä©c$ and thus $uRz$. Therefore $V'$ is the desired set.
   {{{endproof}}}
** $M‚ÇÄ$ principle
   The $M‚ÇÄ$ principle reads as follows:
   \[A ‚ñ∑ B ‚Üí (‚ô¢ A ‚àß ‚ñ° C) ‚ñ∑ (B ‚àß ‚ñ° C)\]

*** Ordinary semantics
    The $(M‚ÇÄ)_{ord}$ condition reads as follows:
    \[‚àÄw,x,y,z(wRxRyS_wz‚áíxS_wz,‚àÄu(zRu‚áíxRu))\]

   #+caption: Ordinary frame condition for $M‚ÇÄ$
   #+name: fig:M_0-ord
   #+attr_latex: :float t :width 0.25\textwidth :placement [H]
   [[file:img/M_0-ord.pdf]]

    {{{begintheorem}}} For any ordinary frame $F$, we have that $F$ satisfies the
    $(M‚ÇÄ)_{ord}$ condition iff any model based on $F$ forces every instantiation of
    the $M‚ÇÄ$ principle. In symbols:

    \[F ‚ä® (M‚ÇÄ)_{ord} ‚áî F ‚ä© M‚ÇÄ\] {{{endtheorem}}}

    {{{beginproof}}}
    - \boxed{‚áí} Let $M$ be a model based on $F$ and let $w$ be any world. Assume
      that $w‚ä©A‚ñ∑B$ and that there exists some $x$ such that $wRx‚ä© ‚ô¢ A ‚àß ‚ñ° C$. It
      follows that there exists some world $y$ such that $xRy‚ä©A$, then since
      $wRy$ and $w‚ä©A‚ñ∑B$ there exists a world $z$ such that $yS_wz‚ä©B$. By the
      $(M‚ÇÄ)_{ord}$ condition we have that $xS_wz$ and $(‚ãÜ)\ ‚àÄu(zRu‚áíxRu)$. Hence,
      it remains to show $z‚ä©‚ñ°C$. Consider some world $u$ such that $zRu$, by
      $(‚ãÜ)$ it follows that $xRu$ and since $x‚ä©‚ñ°C$ we also have $u‚ä©C$.
    - \boxed{‚áê} Let $a,b,c‚ààVar$ and assume $F‚ä©a ‚ñ∑ b ‚Üí (‚ô¢ a ‚àß ‚ñ° c) ‚ñ∑ (b ‚àß ‚ñ° c)$ and
      assume that for some $w,x,y,z$ we have $wRxRyS_wz$. Consider a model based
      on $F$ such that the following holds:
      \begin{flalign*}
      ‚ü¶a‚üß &= \{y\} \\
      ‚ü¶b‚üß &= \{z\} \\
      ‚ü¶c‚üß &= \{w:xRw\}
      \end{flalign*}
      Observe that $w‚ä©a‚ñ∑b$ since $a$ is forced only in $y$ and we have $yS_wz‚ä©b$.
      It follows that $w‚ä©(‚ô¢ a ‚àß ‚ñ° c) ‚ñ∑ (b ‚àß ‚ñ° c)$. Clearly $x‚ä©‚ô¢a‚àß‚ñ°c$, hence there
      must exist some world $v$ such that $xS_wv‚ä©b‚àß‚ñ°c$ but since $b$ is only
      forced in $z$ we have $z=v$ and thus $xS_wz$. To prove the remaining
      implication let $u$ such that $zRu$, then $u‚ä©c$ and thus $xRu$.
    {{{endproof}}}

*** Generalized semantics
    The $(M‚ÇÄ)_{gen}$ condition reads as follows:
    \[‚àÄw,x,y,Y(wRxRyS_wY‚áí‚àÉY'‚äÜY(xS_wY',‚àÄy'‚ààY'‚àÄz(y'Rz‚áíxRz)))\]

    {{{begintheorem}}} For any ordinary frame $F$, we have that $F$ satisfies the
    $(M‚ÇÄ)_{gen}$ condition iff any model based on $F$ forces every instantiation of
    the $M‚ÇÄ$ principle. In symbols:

    \[F ‚ä® (M‚ÇÄ)_{gen} ‚áî F ‚ä© M‚ÇÄ\] {{{endtheorem}}}

    {{{beginproof}}}
    {{{agda}}}
    - \boxed{‚áí} Let $M$ be a model based on $F$ and let $w$ be any world. Assume
      that $w‚ä©A‚ñ∑B$ and that there is a world $x$ such that $wRx‚ä©‚ô¢A‚àß‚ñ°C$. Then
      there must exist some world $y$ such that $xRy‚ä©A$. Since $wRy$ and $w‚ä©A‚ñ∑B$
      there exists some set $Y$ such that $yS_wY‚ä©B$. Then by the $(M‚ÇÄ)_{gen}$
      condition we have that there exists some $Y'‚äÜY$ such that $xS_wY'$ and
      $(‚ãÜ)\ ‚àÄy'‚ààY'‚àÄz(y'Rz‚áíxRz)$. Clearly $Y'‚ä©B$ since $Y'‚äÜY$. To show that
      $Y'‚ä©‚ñ°C$ consider some $y'‚ààY'$ and some $z$ such that $y'Rz$. Then, by
      $(‚ãÜ)$ it follows that $xRz$ and since $x‚ä©‚ñ°C$ we also have $x‚ä©C$.
    - \boxed{‚áê} Let $a,b,c‚ààVar$ and assume $F‚ä©a ‚ñ∑ b ‚Üí (‚ô¢ a ‚àß ‚ñ° c) ‚ñ∑ (b ‚àß ‚ñ° c)$
      and assume that for some $w,x,y,Y$ we have $wRxRyS_wY$. Then consider a
      model based on $F$ such that.
      \begin{flalign*}
      ‚ü¶a‚üß &= \{y\} \\
      ‚ü¶b‚üß &= Y \\
      ‚ü¶c‚üß &= \{w:xRw\}
      \end{flalign*}
      Observe that $w‚ä©a‚ñ∑b$ as $a$ is only forced in $y$ and we have $yS_wY‚ä©b$.
      Consequently it holds that $w‚ä©(‚ô¢ a ‚àß ‚ñ° c) ‚ñ∑ (b ‚àß ‚ñ° c)$. See also that
      $x‚ä©‚ô¢a$ since $xRy‚ä©a$ and also $x‚ä©‚ñ°c$ by definition of the model. Then
      there must exist some set $Y'$ such that $xS_wY'‚ä©b‚àß‚ñ°c$. Clearly $Y'‚äÜY$ since
      $Y'‚ä©b$. To show the remaining condition pick some $y'‚ààY'$ and some $z$
      such that $y'Rz$. Since $Y'‚ä©‚ñ°c$ then $z‚ä©c$ and thus $xRz$.
    {{{endproof}}}

** $P‚ÇÄ$ principle

   The $P‚ÇÄ$ principle reads as follows.
   The $P‚ÇÄ$ principle reads as follows:
   \[A ‚ñ∑ ‚ô¢ B ‚Üí ‚ñ° (A ‚ñ∑ B)\]
*** Ordinary semantics
    The $(P‚ÇÄ)_{ord}$ condition reads as follows:
    \[‚àÄw,x,y,z,u(wRxRyS_wzRu‚áíyS_xu)\]

   #+caption: Ordinary frame condition for $P‚ÇÄ$
   #+name: fig:P_0-ord
   #+attr_latex: :float t :width 0.15\textwidth :placement [H]
   [[file:img/P_0-ord.pdf]]

   {{{begintheorem}}} For any ordinary frame $F$, we have that $F$ satisfies the
   $(P‚ÇÄ)_{ord}$ condition iff any model based on $F$ forces every instantiation of
   the $P‚ÇÄ$ principle. In symbols:

   \[F ‚ä® (P‚ÇÄ)_{ord} ‚áî F ‚ä© P‚ÇÄ\] {{{endtheorem}}}

   {{{beginproof}}}
   - \boxed{‚áí} Let $M$ be a model based on $F$ and let $w$ be any world. Assume
     that $w‚ä©A‚ñ∑‚ô¢B$ and that there is a world $x$ such that $wRx$. Our goal is to
     show that $x‚ä©A‚ñ∑B$. Consider a world $y$ such that $xRy‚ä©A$. As $wRy$ and
     $w‚ä©A‚ñ∑‚ô¢B$ then there exist some worlds $z,u$ such that $yS_wzRu‚ä©B$. By the
     $(P‚ÇÄ)_{ord}$ condition it follows that $yS_xu$ and thus $x‚ä©A‚ñ∑B$.
   - \boxed{‚áê} Let $a,b‚ààVar$ and assume $F‚ä©a ‚ñ∑ ‚ô¢ b ‚Üí ‚ñ° (a ‚ñ∑ b)$ and assume that
     $wRxRyS_wzRu$. We want to show $yS_xu$. Consider a model based on $F$ such
     that:
     \begin{flalign*}
     ‚ü¶a‚üß = \{y \} \\
     ‚ü¶b‚üß = \{u \}
     \end{flalign*}
     Observe that $w‚ä©a‚ñ∑‚ô¢b$ as the only world that forces $a$ is $y$ and we have
     $yS_wz‚ä©‚ô¢b$, because $zRu‚ä©b$. Consequently we have $w‚ä©‚ñ°(a‚ñ∑b)$ and therefore
     $x‚ä©a‚ñ∑b$. Then, since $xRy‚ä©a$ it follows that there exist some $v$ such that
     $yS_xv‚ä©b$, but since $b$ is only forced in $u$, it must be $u=v$ and so
     $yS_xu$.
   {{{endproof}}}

*** Generalized semantics
    The $(P‚Çâ)_{gen}$ condition reads as follows:
    \[‚àÄw,x,y,Y,Z((wRxRyS_wY,‚àÄy‚ààY‚àÉz‚ààZ(yRz))‚áí‚àÉZ'‚äÜZ(yS_xZ'))\]

   {{{begintheorem}}} For any generalized frame $F$, we have that $F$ satisfies the
   $(P‚ÇÄ)_{gen}$ condition iff any model based on $F$ forces every instantiation of
   the $P‚ÇÄ$ principle. In symbols:

   \[F ‚ä® (P‚ÇÄ)_{gen} ‚áî F ‚ä© P‚ÇÄ\] {{{endtheorem}}}

   {{{beginproof}}}
   {{{agda}}}
   - \boxed{‚áí} Let $M$ be a model based on $F$ and let $w$ be any world. Assume
     that $w‚ä©A‚ñ∑‚ô¢B$ and that there is a world $x$ such that $wRx$. We aim to show
     that $x‚ä©A‚ñ∑B$. Assume there is a world $u$ such that $xRu‚ä©A$ and as $wRu$
     and $w‚ä©A‚ñ∑‚ô¢B$ then there exists a set $Y$ $uS_xY‚ä©‚ô¢B$. Let $ùîπ=\{w:w‚ä©B\}$.
     Then observe that $‚àÄy‚ààY$ there exists some $z‚ààùîπ$ since $Y‚ä©‚ô¢B$. Hence by the
     $(P‚ÇÄ)_{gen}$ condition there exists some $ùîπ'‚äÜùîπ$ such that $yS_xùîπ'$. Clearly
     $ùîπ'‚ä©B$, therefore $x‚ä©A‚ñ∑B$.
   - \boxed{‚áê} Let $a,b‚ààVar$ and assume $F‚ä©a ‚ñ∑ ‚ô¢ b ‚Üí ‚ñ° (a ‚ñ∑ b)$ and assume
     that for some $w,x,y,Y,Z$ we have $wRxRyS_wY$ and $(‚ãÜ)\ ‚àÄy‚ààY‚àÉz‚ààZ(yRz)$.
     Consider a model based on $F$ such that:
     \begin{flalign*}
    ‚ü¶a‚üß &= \{y\} \\
    ‚ü¶b‚üß &= Z
     \end{flalign*}
     See that $w‚ä©a‚ñ∑‚ô¢b$ as the only world that forces $a$ is $y$ and we have
     $yS_wY$ and by $(‚ãÜ)$ it follows that $Y‚ä©‚ô¢b$. Consequently it holds that
     $w‚ä©‚ñ°(a‚ñ∑b)$ and since $wRx$ then $x‚ä©a‚ñ∑b$. Also, since $xRy‚ä©a$ then there
     exists $Z'$ such that $yS_xZ'‚ä©b$. Clearly $Z'‚ä©b$ implies $Z'‚äÜZ$ so we are
     done.
   {{{endproof}}}

** $R$ principle
   The $R$ principle reads as follows:

   \[A ‚ñ∑ B ‚Üí (¬¨ (A ‚ñ∑ ¬¨C) ‚ñ∑ (B ‚àß ‚ñ° C))\]

*** Ordinary semantics
    The $R_{ord}$ condition reads as follows:
    \[‚àÄw,x,y,z(wRxRyS_wz‚áí‚àÄv(zRv‚áíyS_xv)) \]

   #+caption: Ordinary frame condition for $R$
   #+name: fig:ord-R-condition
   #+attr_latex: :float t :width 0.20\textwidth :placement [H]
   [[file:img/wip.png]]

   {{{begintheorem}}}
   For any ordinary frame $F$, we have that $F$ satisfies the
   $R_{ord}$ condition iff any model based on $F$ forces every instantiation of
   the $R$ principle. In symbols:

   \[F ‚ä® R_{ord} ‚áî F ‚ä© R\]
   {{{endtheorem}}}
   {{{beginproof}}}
   - \boxed{‚áí} Let $M$ be a model based on $F$ and let $w$ be any world. Assume
     that $w‚ä©A‚ñ∑B$ and that there is a world $x$ such that $wRx‚ä©¬¨(A‚ñ∑¬¨C)$. We need
     to see that there is some world $v$ such that $xS_wv‚ä©B‚àß‚ñ°C$. From
     $x‚ä©¬¨(A‚ñ∑¬¨C)$ we get a world $y$ such that $xRy‚ä©A$ and $(‚ãÜ)\ ‚àÄv(yS_xv‚áív‚ä©C)$.
     Since $w‚ä©A‚ñ∑B$ and by transitivity we have $wRy$ it follows that there
     exists a world $z$ such that $yS_wz‚ä©B$. To see that $z$ is the desired
     world it remains to see that $z‚ä©‚ñ°C$. Let $u$ be such that $zRu$, then by
     $R_{ord}$ it follows that $yS_xu$ and by $(‚ãÜ)$ we get $u‚ä©C$.
   - \boxed{‚áê} Let $a,b,c‚ààVar$ and assume that for some $w,x,y,z$ we have
     $wRxRyS_wz$ . Consider a model
     based on $F$ that satisfies the following.
    \begin{flalign*}
     ‚ü¶a‚üß &= \{y\} \\
     ‚ü¶b‚üß &= \{z\} \\
     ‚ü¶c‚üß &= \{u:yS_xu\}
    \end{flalign*}
     By assumption we have that $w‚ä©a ‚ñ∑ b ‚Üí (¬¨ (a ‚ñ∑ ¬¨c) ‚ñ∑ (b ‚àß ‚ñ° c))$. Clearly
     $w‚ä©a‚ñ∑b$ as we have $yS_wz‚ä©b$. Consequently it holds that $w‚ä©¬¨ (a ‚ñ∑ ¬¨c) ‚ñ∑ (b
     ‚àß ‚ñ° c)$. In order to show that $x‚ä©¬¨ (a ‚ñ∑ ¬¨c)$, considering that $a$ is only
     forced in $y$, it suffices to observe that $‚àÄz(yS_xz‚áíz‚ä©c)$, which clearly
     holds. Then there must exist some world $v$ such that $xS_wv‚ä©b‚àß‚ñ°c$ but
     $v=z$ since $z$ is the only world that forces $b$, hence $xS_wz‚ä©‚ñ°c$. Now to
     show $‚àÄv(zRv‚áíyS_xv)$ consider some $v$ such that $zRv$. From $z‚ä©‚ñ°c$ we get
     $v‚ä©c$ and thus $yS_xv$.
   {{{endproof}}}

*** Generalized semantics

    We first introduce the concept of choice set

   {{{begindef}}} If $xRy$ we say that a set of worlds $K$ is a \gls{choice-set} for
   $‚ü®x,y‚ü©$ iff for any $V$ such that $yS_xV$ we have $V‚à©K‚â†‚àÖ$. We denote the
   family of choice sets for $‚ü®x,y‚ü©$ by $ùíû(x,y)$. Note that this definition
   depends on the frame, but it should always be clear by context.
   {{{enddef}}}

    The $R_{gen}$ condition reads as follows:
    \begin{flalign*}
    &‚àÄw,x,y,Y,K(wRxRyS_wY,K‚ààùíû(x,y)   \\
    ‚áí& ‚àÉY'‚äÜY(xS_wY',‚àÄy'‚ààY'‚àÄz(y'Rz‚Üíz‚ààK)))
    \end{flalign*}

   #+caption: Generalized frame condition for $R$
   #+name: fig:gen-R-condition
   #+attr_latex: :float t :width 0.20\textwidth :placement [H]
   [[file:img/wip.png]]

   {{{begintheorem}}}
   <<theorem:R‚Å∞>>
   For any generalized frame $F$, we have that $F$ satisfies the
   $R_{gen}$ condition iff any model based on $F$ forces every instantiation of
   the $R$ principle. In symbols:

   \[F ‚ä® R_{gen} ‚áî F ‚ä© R\]
   {{{endtheorem}}}
   {{{beginproof}}}
   {{{agda}}}
   - \boxed{‚áí} Let $M$ be a model based on $F$ assume there is a world $w$ such
     that $w‚ä©A‚ñ∑B$ and a world $x$ such that $wRx$ and $x‚ä©¬¨(A‚ñ∑¬¨C)$. We need to
     show that there is a set $Z$ such that $xS_wZ‚ä©B‚àß‚ñ°C$. From $x‚ä©¬¨(A‚ñ∑¬¨C)$ it
     follows that there is a world $y$ such that $xRy‚ä©A$ and $(‚ãÜ)\
     ‚àÄV(yS_xV‚áí‚àÉc‚ààV(c‚ä©C))$. Consider the set $K‚âî\{c:c‚ä©C,‚àÉV(c‚ààV,yS_xV)\}$. Clearly
     by $(‚ãÜ)$ it follows that $K$ is a choice set for $‚ü®x,y‚ü©$. By transitivity
     of $R$ we get $wRy$ and since $w‚ä©A‚ñ∑B$ then there must exist some $Y$ such
     that $yS_wY‚ä©B$. We can now apply the $R_{gen}$ condition and get a $Y'‚äÜY$
     such that $xS_wY'$ and $(‚Ä†)\ ‚àÄy'‚ààY'‚àÄz(y'Rz‚Üíz‚ààK)$. To show that $Y'$ is the
     desired set it remains to see that $Y'‚ä©B‚àß‚ñ°C$. From the fact that $Y'‚äÜY‚ä©B$
     it easily follows that $Y'‚ä©B$. Now, let $y'‚ààY'$ and $u$ such that $y'Ru$,
     from $(‚Ä†)$ we get $u‚ààK$ and by definition of $K$ we have $u‚ä©C$.
   - \boxed{‚áê} Let $a,b,c‚ààVar$ and assume $F‚ä© a ‚ñ∑ b ‚Üí (¬¨ (a ‚ñ∑ ¬¨c) ‚ñ∑ (b ‚àß ‚ñ° c))$.
     Assume also that for some $w,x,y,Y,K$ we have $wRxRyS_wY,K‚ààùíû(x,y)$. Now
     consider a model based on $F$ that satisfies the following:
    \begin{flalign*}
    ‚ü¶a‚üß &=\{y\} \\
    ‚ü¶b‚üß &=Y \\
    ‚ü¶c‚üß &= K \\
    \end{flalign*}
    By assumption we have $w‚ä©a ‚ñ∑ b ‚Üí (¬¨ (a ‚ñ∑ ¬¨c) ‚ñ∑ (b ‚àß ‚ñ° c))$. Observe that
     that $w‚ä©a‚ñ∑b$ since $yS_wY‚ä©b$. Thus $w‚ä©¬¨ (a ‚ñ∑ ¬¨c) ‚ñ∑ (b ‚àß ‚ñ° c)$. Being $y$
     the only world that forces $a$, in order to show $x‚ä©¬¨(a‚ñ∑¬¨c)$ we need to see
     that $‚àÄV(yS_xV‚áí‚àÉz‚ààV(z‚ä©c))$, which is equivalent to $‚àÄV(yS_xV‚áí‚àÉz‚ààV‚à©K)$ and
     this holds since $K‚ààùíû(x,y)$. As a consequence of $x‚ä©¬¨(a‚ñ∑¬¨c)$ we have that
     there exists a $Y'$ such that $xS_wY'‚ä©b‚àß‚ñ°c$. From $Y'‚ä©b$ we get $Y'‚äÜY$ and
     from $Y'‚ä©‚ñ°c$ we get $‚àÄy'‚ààY'(‚àÄz(y'Rz‚Üíz‚ààK))$, hence $Y'$ is the desired set.
   {{{endproof}}}

** $R‚ÇÅ$ principle
  The $R_1$ principle reads as follows:
  \[A ‚ñ∑ B ‚Üí (¬¨(A ‚ñ∑ ¬¨C)‚àß (D‚ñ∑‚ô¢E))‚ñ∑(B‚àß‚ñ°C‚àß(D‚ñ∑E))\]

*** Ordinary semantics

    The $(R‚ÇÅ)_{ord}$ frame condition reads as follows:
    \[‚àÄw,x,y,z(wRxRyS_wz‚áí‚àÄu(zRu‚áíyS_xu,‚àÄv(uS_xv‚áí‚àÄm(vRm‚áíuS_zm))))\]

    # #+caption: Ordinary frame condition for $R‚ÇÅ$
    # #+name: fig:ord-R‚ÇÅ-condition
    # #+attr_latex: :float t :width 0.20\textwidth :placement [H]
    # [[file:img/wip.png]]

    {{{begintheorem}}}
    For any ordinary frame $F$, we have that $F$ satisfies the
    $(R‚ÇÅ)_{ord}$ condition iff any model based on $F$ forces every instantiation of
    the $R‚ÇÅ$ principle. In symbols:

    \[F ‚ä® (R‚ÇÅ)_{ord} ‚áî F ‚ä© R‚ÇÅ\]
    {{{endtheorem}}}

    {{{beginproof}}}
    - \boxed{‚áê} Let $a,b,c,d,e‚ààVar$ and assume $F‚ä© a ‚ñ∑ b ‚Üí ((¬¨ (a ‚ñ∑ ¬¨c) ‚àß(d‚ñ∑‚ô¢e))
      ‚ñ∑ (b ‚àß ‚ñ° c ‚àß (d‚ñ∑e)))$. Consider some worlds $w,x,y,z,u,v,m$ and assume for
      a contradiction that $wRxRyS_wzRu,yS_xu‚áí(uS_xv,vRm,u\cancel{S}_zm)$. Now
      consider a model based on $F$ that satisfies the following:
      \begin{flalign*}
      ‚ü¶a‚üß &= \{y\} \\
      ‚ü¶b‚üß &= \{z\} \\
      ‚ü¶c‚üß &= \{w:yS_xw\} \\
      ‚ü¶d‚üß &= \{?\} \\
      ‚ü¶e‚üß &= \{?\} \\
      \end{flalign*}
      First observe that $w‚ä©a‚ñ∑b$ since $a$ is only forced in $y$ and we have
      $yS_wz‚ä©b$. Therefore $w‚ä©¬¨ (a ‚ñ∑ ¬¨c) ‚àß(d‚ñ∑‚ô¢e) ‚ñ∑ (b ‚àß ‚ñ° c ‚àß (d‚ñ∑e))$. Now we
      show that $x‚ä©¬¨ (a ‚ñ∑ ¬¨c)$. Since $a$ is only forced in $y$ and $xRy$, we
      need to show that $‚àÄu(yS_xu‚áíu‚ä©c)$, which clearly holds. We proceed by
      showing $x‚ä©d‚ñ∑‚ô¢e$ (????).
    - \boxed{‚áí} Let $M$ be a model based on $F$ assume there is a world $w$ such
      that $w‚ä©A‚ñ∑B$ and a world $x$ such that $wRx$ and $x‚ä©¬¨(A‚ñ∑¬¨C)‚àß(D‚ñ∑‚ô¢E)$. Then
      there exists world $y$ such that $xRy‚ä©A$ and $(‚ãÜ)\ ‚àÄv(yS_xv‚áív‚ä©C)$. As
      $wRy‚ä©A$ and $w‚ä©A‚ñ∑B$ there exists a world $z$ such that $yS_wz‚ä©B$. It
      remains to show that $z‚ä©‚ñ°C‚àß(D‚ñ∑E)$. We first see that $z‚ä©‚ñ°C$. Consider
      $v$ such that $zRv$, by $(R‚ÇÅ)_{ord}$ it follows that $yS_xv$ and by $(‚ãÜ)$
      we get $v‚ä©C$. Now we show $z‚ä©D‚ñ∑E$. Let $u$ be such that $zRu‚ä©D$, we need
      to find some $m$ such that $uS_zm‚ä©E$. By $(R‚ÇÅ)_{ord}$ we get $yS_xu$ and
      $(‚Ä†)\ ‚àÄv,m((uS_xv,vRm)‚áíuS_zm)$. See that $yS_xu$ implies $xRu$ and since
      $x‚ä©D‚ñ∑‚ô¢E$ and $u‚ä©D$ we get that there is some $n$ such that $uS_xn‚ä©‚ô¢E$.
      Hence there is a world $m$ such that $nRm‚ä©E$. Finally by $(‚Ä†)$ and $uS_xn$
      and $nRm$ we get $uS_zm$ and thus we have the desired $m$ and we conclude
      $z‚ä©D‚ñ∑E$.

    {{{endproof}}}

*** Generalized semantics
    Some definitions:
    1. $R^{-1}[E] ‚âî \{x : ‚àÉy‚ààE. xRy\}$. $E$ denotes a set.
    2. $R‚Çì^{-1}[E]‚âîR^{-1}[E]‚à©R[x]$. $E$ denotes a set.


    The $(R_1)_{gen}$ condition reads as follows:
    \begin{flalign*}
    &‚àÄw,x,u,ùîπ,‚ÑÇ,ùîº(wRxRuS_wùîπ, ‚ÑÇ‚ààùíû(x,u) \\
    ‚áí\ & (‚àÉùîπ'‚äÜùîπ)(xS_wùîπ',R[ùîπ']‚äÜ‚ÑÇ,(‚àÄv‚ààùîπ')(‚àÄc‚àà‚ÑÇ)(vRcS‚ÇìR‚Çì^{-1}[ùîº]‚áí(‚àÉùîº'‚äÜùîº)cS_vùîº')))
    \end{flalign*}
    \begin{flalign*}
    &‚àÄw,x,u,ùîπ,‚ÑÇ,ùîº(wRxRuS_wùîπ, ‚ÑÇ‚ààùíû(x,u) \\
    ‚áí\ & (‚àÉùîπ'‚äÜùîπ)(xS_wùîπ',R[ùîπ']‚äÜ‚ÑÇ,(‚àÄv‚ààùîπ')(‚àÄc‚àà‚ÑÇ)(‚àÉU‚äÜR‚Çì^{-1}[ùîº],vRcS‚ÇìU)‚áí(‚àÉùîº'‚äÜùîº)cS_vùîº')))
    \end{flalign*}

    {{{begintheorem}}}
    <<theorem:R‚ÇÅ>>
    For any generalized frame $F$, we have that $F$ satisfies the
    $(R‚ÇÅ)_{gen}$ condition iff any model based on $F$ forces every instantiation of
    the $R‚ÇÅ$ principle. In symbols:

    \[F‚ä®(R‚ÇÅ)_{gen}‚áîF‚ä©R‚ÇÅ\]
    {{{endtheorem}}}

    {{{beginproof}}}
    {{{agda}}}
    - \boxed{‚áí} Let's fix the model and let $w ‚àà W$ be arbitrary. Suppose $w‚ä© A
      ‚ñ∑B$, and let $x$ be such that $wRx$ and $x‚ä© ¬¨(A ‚ñ∑ ¬¨C) ‚àß (D ‚ñ∑ ‚ô¢E)$. It
      follows from $x ‚ä©¬¨(A ‚ñ∑¬¨C)$ that there exists $u$ such that $xRu$, such
      that $u‚ä©A$, and for every $Z$ such that $uS_x Z$ there is some $c_Z ‚àà Z$
      such that $c_Z ‚ä©C$. From $wRu$, $w‚ä© A‚ñ∑ B$ and $u‚ä© A$ follows in particular
      that there is a $ùîπ$, $uS_w ùîπ ‚ä©B$. Let $‚ÑÇ ‚âî \{c_Z: uS_x Z\}$. It is easy to
      check that $‚ÑÇ ‚àà ùíû(x, u)$. Let $ùîº ‚âî [‚ä©E]$ (set of worlds that force $E$).
      For the selected $w, x, u, ùîπ, ‚ÑÇ, ùîº$ the property $(R 1)_{gen}$ implies
      that there exists $ùîπ' ‚äÜ ùîπ$ such that:

      \[xS_wùîπ',R[ùîπ']‚äÜ‚ÑÇ ,(‚àÄv‚ààùîπ')(‚àÄc‚àà‚ÑÇ)(vRcS_xR_x^{-1}[ùîº]‚áí(‚àÉùîº'‚äÜùîº)cS_vùîº')\]

      We have that $ùîπ' ‚ä©B$ since $ùîπ'‚äÜùîπ$ and $ùîπ'‚ä©‚ñ° C$ since $R[ùîπ']‚äÜ‚ÑÇ$. We now show
      that $ùîπ'‚ä© D‚ñ∑ E$. Assume that for some $c ‚àà R [ùîπ']$ we have $c‚ä© D$. From
      earlier we have $x‚ä© D ‚ñ∑ ‚ô¢E$. Since $c ‚àà R [ùîπ '] ‚äÜ C ‚äÜ R [x]$, then $xRc$ so
      it follows that there exists $U$ such that $cS_x U$ and $U‚ä©‚ô¢E$. Clearly
      $U‚äÜ[‚ô¢E]_x$ and also $[‚ô¢E]_x‚äÜR[x]$, hence by monotonicity we have
      $cS_x[‚ô¢E]_x$ which is the same as $cS_x R_x^{‚àí1}[ùîº]$ so by the above
      property there exists $ùîº'‚äÜùîº$ such that $cS_v ùîº'$. Because $ùîº'‚äÜùîº$ we have
      $ùîº'‚ä©E$.
    - \boxed{‚áê} Assume for a contradiction that $F‚ä≠(R‚ÇÅ)_{gen}$. It follows that
      there exist $w,x,u,ùîπ,‚ÑÇ,ùîº$ such that $wRxRuS_wùîπ$, $‚ÑÇ‚ààùíû(x,u)$ and:
      \[(‚àÄùîπ'‚äÜùîπ)\left(xS_wùîπ', R[ùîπ']‚äÜ‚ÑÇ‚áí (‚àÉv‚ààùîπ')(‚àÉc‚àà‚ÑÇ)(‚àÉZ‚äÜR_x^{-1}[ùîº].vRcS_xZ,‚àÄùîº'‚äÜùîº.
      c\cancel{S}_v ùîº')\right)\]

      Let $ùí±$ be a family of sets defined thus:
      \[ùí±‚âî \{U : U‚äÜùîπ, xS_wU,R[U]‚äÜ‚ÑÇ\}\]

      From the condition it follows that for every $U‚ààùí±$ the following is valid:
      \[(‚àÉv_U‚ààU)(‚àÉc_U‚àà‚ÑÇ)(‚àÉZ_U‚äÜR_x^{-1}[ùîº](v_URc_US_xZ_U,(‚àÄùîº'‚äÜùîº) c_U\cancel{S}_{v_U} ùîº'))\]

      Let us fix such $v_U$ and $c_U$ and $Z_U$ for all $U‚ààùí±$.

      Define a valuation such that the following applies:
      \begin{flalign*}
      ‚ü¶a‚üß &= \{u\} \\
      ‚ü¶b‚üß &= ùîπ \\
      ‚ü¶c‚üß &= ‚ÑÇ \\
      ‚ü¶d‚üß &= \{c_U:U‚ààùí±\} \\
      ‚ü¶e‚üß &= ùîº
      \end{flalign*}

      By assumption we have $w ‚ä© a ‚ñ∑ b ‚Üí (¬¨(a‚ñ∑¬¨c)‚àß(d‚ñ∑‚ô¢e))‚ñ∑(b‚àß‚ñ°c‚àß(d‚ñ∑e))$.

      It is easy to see that $w ‚ä© a ‚ñ∑ b$ and $x ‚ä© ¬¨(a ‚ñ∑ ¬¨c)$.

      Let us prove $x ‚ä© d‚ñ∑‚ô¢e$. Let $xRc‚ä© D$. Then $c = c_U$ for some $U ‚àà ùí±$.
      From the definition of $c_U$ we have $c_U S_x Z_U$, a forcing is defined
      such that $e$ is true exactly on the set $ùîº$. Hence $R_x^{-1}[ùîº]‚ä©‚ô¢e$ and
      since $Z_U‚äÜR_x^{-1}[ùîº]$ it follows that $x ‚ä© d‚ñ∑‚ô¢e$.

      We can also check that for $U ‚àà ùí±$ we have $U‚ä© b ‚àß ‚ñ°c$ and the following
      following condition holds for any set $U$:
      \begin{flalign*}
        (‚ãÜ)\ xS_wU ,U‚ä© b ‚àß ‚ñ°c‚áíU‚àà ùí±
      \end{flalign*}
      Then since $w‚ä©a‚ñ∑b$ and $wRx‚ä©(a‚óÅc)‚àß(d‚ñ∑‚ô¢e)$ there must exist some set $U$
      such that $xS_wU‚ä©b‚àß‚ñ°c‚àß(d‚ñ∑e)$. From $(‚ãÜ)$ follows that that $U‚ààùí±$ hence
      there exist $v_U,c_U,Z_U$ such that $Z_U‚äÜR_x^{-1}[ùîº]$ and
      $v_URc_US_xZ_U,(‚àÄùîº'‚äÜùîº) c_U\cancel{S}_{v_U} ùîº'$. Since $c_U‚ä©d$ there must
      exist some $Y$ such that $c_US_{v_U}Y‚ä©e$, however, by the definition of
      the valuation it follows that $Y‚äÜùîº$ and thus $c_U\cancel{S}_{v_U} Y$,
      which is a contradiction.

    {{{endproof}}}

# \newpage
** $R¬π$ principle

   The $R¬π$ principle reads as follows:
   \[A ‚ñ∑ B ‚Üí (‚ô¢¬¨(D ‚ñ∑ ¬¨C)‚àß (D‚ñ∑A))‚ñ∑(B‚àß‚ñ°C)\]

*** Generalized semantics
    The $(R¬π)_{gen}$ condition reads as follows:
    \begin{flalign*}
    &‚àÄw,x,y,z,ùî∏,ùîπ,‚ÑÇ,ùîª. \\
    &wRxRyRz, \\
    & (‚àÄu.wRu,u‚ààùî∏‚áí‚àÉV.uS_wV,V‚äÜùîπ), \\
    & (‚àÄu.xRu,u‚ààùîª‚áí‚àÉV.uS_xV,V‚äÜùî∏), \\
    & (‚àÄV.zS_yV‚áí‚àÉv‚ààV.v‚àà‚ÑÇ),      \\
    & z‚ààùîª \\
    ‚áí\ & ‚àÉV‚äÜùîπ(xS_wV,R[V]‚äÜ‚ÑÇ)
    \end{flalign*}

    {{{begintheorem}}}
    For any generalized frame $F$, we have that $F$ satisfies the
    $(R¬π)_{gen}$ condition iff any model based on $F$ forces every instantiation of
    the $R¬π$ principle. In symbols:

    \[F‚ä®(R¬π)_{gen}‚áîF‚ä©R¬π\]
    {{{endtheorem}}}


    {{{beginproof}}}
    {{{agda}}}
    - \boxed{‚áí} Fix a model $M$ and a world $w$, we are to prove that $w‚ä©A ‚ñ∑ B ‚Üí
      (‚ô¢¬¨(D ‚ñ∑ ¬¨C)‚àß (D‚ñ∑A))‚ñ∑(B‚àß‚ñ°C)$. For that assume that $w‚ä©A‚ñ∑B$ and that for some
      $x,y,z$ we have $wRxRyRz$ and $x‚ä©D‚ñ∑A$, $y‚ä©¬¨(D‚ñ∑¬¨C)$, $z‚ä©D$. Now let
      $ùî∏‚âî\{w:w‚ä©A\}$. We define $ùîπ,‚ÑÇ,ùîª$ likewise for formulas $B,C,D$ respectively.
      It is routine to check that the left part of the implication of $(R¬π)_{gen}$
      is met. Hence there exist a set $V‚äÜùîπ$ such that $xS_wV$ and $R[V]‚äÜ‚ÑÇ$. By the
      definition of the sets $ùîπ$ and $‚ÑÇ$ it follows that $V‚ä©B‚àß‚ñ°C$.
    - \boxed{‚áê} Fix a frame $F$ and let $a,b,c,d$ be propositional variables and
      assume $F‚ä©a ‚ñ∑ b ‚Üí (‚ô¢¬¨(d ‚ñ∑ ¬¨c)‚àß (d‚ñ∑a))‚ñ∑(b‚àß‚ñ°c)$. Assume that the left part
      of the implication of $(R¬π)_{gen}$ holds. Now consider a model extending
      $F$ such that:
      \begin{flalign*}
       ‚ü¶a‚üß &= ùî∏ \\
       ‚ü¶b‚üß &= ùîπ \\
       ‚ü¶c‚üß &= ‚ÑÇ \\
       ‚ü¶d‚üß &= ùîª
      \end{flalign*}
      Now one can easily check that $w‚ä©A‚ñ∑B$, $x‚ä©‚ô¢¬¨(D‚ñ∑¬¨C)‚àß(D‚ñ∑A)$, hence there exists $U$
      such that $xS_wU$ and $U‚ä©B‚àß‚ñ°C$. From that we derive that $U‚äÜùîπ$ and $R[U]‚äÜ‚ÑÇ$.
    {{{endproof}}}

** $R¬≤$ principle                                                  :noexport:

   The $R¬≤$ principle reads as follows:
   \[A ‚ñ∑ B ‚Üí (‚ô¢ [(E ‚ñ∑ D) ‚àß ‚ô¢ ¬¨ (E ‚ñ∑ ¬¨ C)] ‚àß (D ‚ñ∑ A)) ‚ñ∑ (B ‚àß ‚ñ° C) \]

*** Generalized semantics
    The $(R¬≤)_{gen}$ condition reads as follows:
    \begin{flalign*}
    &‚àÄw,x,y,z,s,ùî∏,ùîπ,‚ÑÇ,ùîª,ùîº.\\
    &wRxRyRzRs, \\
    & (‚àÄu.wRu‚ààùî∏‚áí‚àÉV.uS_wV‚äÜùîπ), \\
    & (‚àÄu.xRu‚ààùîª‚áí‚àÉV.uS_xV‚äÜùî∏), \\
    & (‚àÄu.yRu‚ààùîº‚áí‚àÉV.uS_yV‚äÜùîª), \\
    & (‚àÄV.sS_zV‚áíV‚à©‚ÑÇ‚â†0),      \\
    & s‚ààùîª \\
    ‚áí\ & ‚àÉV‚äÜùîπ.xS_wV,R[V]‚äÜ‚ÑÇ
    \end{flalign*}

    {{{begintheorem}}}
    For any generalized frame $F$, we have that $F$ satisfies the
    $(R¬≤)_{gen}$ condition iff any model based on $F$ forces every instantiation of
    the $R¬≤$ principle. In symbols:

    \[F‚ä®(R¬≤)_{gen}‚áîF‚ä©R¬≤\]
    {{{endtheorem}}}

    {{{beginproof}}}
    - \boxed{‚áí} Fix a model and assume that for some world $w$ we have $w‚ä©A‚ñ∑B$.
      Consider some $x$ such that $wRx‚ä©‚ô¢ [(E ‚ñ∑ D) ‚àß ‚ô¢ ¬¨ (E ‚ñ∑ ¬¨ C)] ‚àß (D ‚ñ∑ A)$.
      Hence there exists some $y$ such that $xRy‚ä©(E ‚ñ∑ D) ‚àß ‚ô¢ ¬¨ (E ‚ñ∑ ¬¨ C)$. It
      follows that there exists some $z$ such that $yRz‚ä© ¬¨ (E ‚ñ∑ ¬¨ C)$ and thus
      there exists some $s$ such that $zRs‚ä©E$ and $(‚ãÜ)\ ‚àÄV(sS_zV‚áí‚àÉc‚ààV(c‚ä©C))$.
    - \boxed{‚áê}
    {{{endproof}}}

** $R‚Åø$ principle
   The $R^n$ principle is defined thus cite:two-new-series:
   \begin{flalign*}
   U_0 &‚âî ‚ô¢¬¨(D_0‚ñ∑¬¨C) \\
   U_{r+1} &‚âî ‚ô¢((D·µ£‚ñ∑D_{r+1}) ‚àß U·µ£) \\
   \\
   R‚Å∞& ‚âî A ‚ñ∑ B ‚Üí ¬¨ (A ‚ñ∑ ¬¨ C) ‚ñ∑ B ‚àß ‚ñ° C \\
   R^{n+1}& ‚âî A ‚ñ∑ B ‚Üí ((D_{n}‚ñ∑A) ‚àß U_{n}) ‚ñ∑ B ‚àß ‚ñ° C
   \end{flalign*}
*** Ordinary semantics
    The frame condition for ordinary semantics $(R^n)_{ord}$ can be found in
    cite:two-new-series.

*** Generalized semantics
    The $(R‚Åø)_{gen}$ condition reads as follows:
    \begin{flalign*}
    &‚àÄw,x‚ÇÄ,‚Ä¶,x_{n-1},y,z,ùî∏,ùîπ,‚ÑÇ,ùîª‚ÇÄ,‚Ä¶,ùîª_{n-1}.\\
    &wRx_{n-1}R‚Ä¶Rx_0RyRz, \\
    & (‚àÄu.wRu,u‚ààùî∏‚áí‚àÉV.uS_wV‚äÜùîπ), \\
    & (‚àÄu.x_{n-1}Ru‚ààùîª_{n-1}‚áí‚àÉV.uS_{x_{n-1}}V‚äÜùî∏), \\
    & (‚àÄi‚àà\{1‚Ä¶n-1\}‚àÄu.x·µ¢Ru‚ààùîª_i‚áí‚àÉV.uS_{x_i}V‚äÜùîª_{i+1}), \\
    & (‚àÄV.zS_yV‚áíV‚à©‚ÑÇ‚â†0),      \\
    & z‚ààùîª‚ÇÄ \\
    ‚áí\ & ‚àÉV‚äÜùîπ.x_{n-1}S_wV,R[V]‚äÜ‚ÑÇ
    \end{flalign*}
    {{{beginlemma}}}
    <<lemma:R‚Åø>>
    Let $M$ be a model, let $x$ be a world of $M$ and let $n‚àà‚Ñï$. For any $i‚â§n$ we have
    that if $M , x ‚ä© U_i$ then there exist some worlds $y,z,x‚ÇÄ,‚Ä¶,x_{i}$ such that:
    1. $x·µ¢=x$;
    2. $x_iR‚Ä¶Rx‚ÇÄRyRz$;
    3. for all $j‚â§i$ we have that $M,x_j‚ä©U_j$;
    4. for all $j<i$ we have that $M,x_j‚ä©D_j‚ñ∑D_{j+1}$;
    5. for all $V$ we have that if $zS_yV$ then $V‚à©\{w:M,w‚ä©C\}‚â†‚àÖ$;
    6. $M,z‚ä©D‚ÇÄ$.
    {{{beginproof}}}
    {{{agda}}}

    By induction on $i$.
    - For $i=0$ we have that $x‚ä©‚ô¢¬¨(D‚ÇÄ‚ñ∑¬¨C)$. It follows that there exists some
      $y$ such that $xRy‚ä©¬¨(D‚ÇÄ‚ñ∑¬¨C)$ and therefore there exists some $z$ such that
      $yRz‚ä©D‚ÇÄ$ and for any $V$, if $zS_yV$, then $V‚à©\{w:M,w‚ä©C\}‚â†‚àÖ$. It is clear
      that all claims are met.
    - For $i+1$ we have that $x‚ä©‚ô¢(D_i‚ñ∑D_{i+1}‚àßU_i)$. It follows that there
      exists some $x_{i}$ such that $x_i‚ä©D_i‚ñ∑D_{i+1}‚àßU_i$. By IH there exist
      $y,z,x‚ÇÄ,‚Ä¶,x_{i}$ such that satisfy claims $1‚Ä¶6$. We set $x_{i+1}‚âîx$. It is
      trivial to observe that by using the IH all conditions are met for $i+1$.
    {{{endproof}}}
    {{{endlemma}}}
    {{{begintheorem}}}
    <<theorem:R‚Åø>>
    For any generalized frame $F$, we have that $F$ satisfies
    the $(R‚Åø)_{gen}$ condition iff any model based on $F$ forces every
    instantiation of the $R‚Åø$ principle. In symbols:

    \[F‚ä®(R‚Åø)_{gen}‚áîF‚ä©R‚Åø\]
    {{{endtheorem}}}

    {{{beginproof}}}
    {{{agda}}}

    If $n=0$ we refer to theorem [[theorem:R‚Å∞]]. For $n+1$ proceed as follows.
    - \boxed{‚áí} Fix a model and assume that for some world $w$ we have $w‚ä©A‚ñ∑B$.
      Then assume also that $wRx‚ä©((D‚Çô‚ñ∑A)‚àßU_n)$. By lemma [[lemma:R‚Åø]] it follows
      that there exist $y,z,x‚ÇÄ,‚Ä¶,x_{n}$ satisfying $1‚Ä¶6$. Then let $ùî∏‚âî‚ü¶A‚üß$,
      $ùîπ‚âî‚ü¶B‚üß$, $‚ÑÇ‚âî‚ü¶C‚üß$ and for $i‚â§n$ let $ùîª·µ¢‚âî‚ü¶D·µ¢‚üß$. It is routine to check that
      the left part of the $(R^{n+1})_{gen}$ holds and thus we get that there exists
      some $V‚äÜùîπ$ such that $x_{n}S_wV$ and $R[V]‚äÜ‚ÑÇ$. Since $V‚äÜùîπ$ we have that
      $x_{n}‚ä©B$ and since $R[V]‚äÜ‚ÑÇ$ we have $x_{n}‚ä©‚ñ°C$. Finally, since
      $x_{n}=x$ we conclude $x‚ä©B‚àß‚ñ°C$.
    - \boxed{‚áê} Fix a frame $F$ and let $a,b,c,d‚ÇÄ,‚Ä¶,d‚Çô$ be propositional
      variables and assume $F‚ä©R^{n+1}$. Assume that the left part of the
      implication of $(R^{n+1})_{gen}$ holds. Now consider a model based on $F$
      that satisfies the following:
      \begin{flalign*}
       ‚ü¶a‚üß &= ùî∏ \\
       ‚ü¶b‚üß &= ùîπ \\
       ‚ü¶c‚üß &= ‚ÑÇ \\
       ‚ü¶d·µ¢‚üß &= ùîª·µ¢, \text{ for all } i‚àà\{0‚Ä¶n\}
      \end{flalign*}
      Now one can routinely check that $w‚ä©A‚ñ∑B$ and $x‚ä©((D_n‚ñ∑A)‚àßU_n)$, hence there
      exists $U$ such that $xS_wU$ and $U‚ä©B‚àß‚ñ°C$. From that we derive that $U‚äÜùîπ$
      and $R[U]‚äÜ‚ÑÇ$.
    {{{endproof}}}

** $R‚Çô$ principle
   The $R_n$ principle is defined thus cite:two-new-series:
   \begin{flalign*}
   wip
   \end{flalign*}

* The logic of Agda
  Everything about agda in general.
  Look here cite:norell:thesis.

** Universe hierarchy
   <<sec:universe-hierarchy>>
   In Agda we have $Set·µ¢ : Set_{i+1}$ for $i‚àà‚Ñï$.
** Positivity
   <<sec:positivity>>

   See cite:agda-doc.
* Agda in the project
  The goal of this section is to guide the reader through a brief practical
  introduction to the language while explaining some key parts of code that we
  have implemented.

  It is worth noting that we have started from scratch as we believe that no
  other previous work in interpretability logics has been done in Agda.

  The implementation relies on the Agda standard library cite:agda-stdlib.

** Naming conventions
   1. If we have =f : T= we say that =f= has type =T= or that =f= is a proof of =T=.
   2. If we have =f : A ‚Üí B ‚Üí C= we say =f= has arguments =A= and =B= and it has
      return type =C=.
** Modal formulas
   Here we present the Agda type that represents a formula as defined in section
   [[sec:language]]. It is a very simple type yet an insightful introductory example.

   First we define variables to be natural numbers:
   #+begin_src text
Var : Set
Var = Nat
   #+end_src

   We proceed by inductively defining the formula type: =Fm=. We add a
   constructor for variables and one for each primitive operator.
   #+begin_src text
data Fm : Set where
  var : Var ‚Üí Fm
  ‚ä•' : Fm
  _‚Üù_ : Fm ‚Üí Fm ‚Üí Fm
  _‚ñ∑_ : Fm ‚Üí Fm ‚Üí Fm
   #+end_src
   There are a number of things to take notice:
   1. The =data= keyword is used to introduce the definition of a new type;
   2. the newly introduced =Fm= type is not indexed by any other type, hence it
      has type =Set= as indicated by =Fm : Set=;
   3. take the constructor =var=, which has type =Var ‚Üí Fm=. This means that if
      we apply =var= to a variable (i.e. a natural number) we get a term of type
      =Fm=. For instance, =var 3= has type =Fm=.
   4. we have named the bottom constructor =‚ä•'= since the symbol =‚ä•= is commonly
      used in Agda. We have used the =‚Üù= to denote an implication since =‚Üí= is a
      reserved symbol;
   5. the underscores in =_‚Üù_= and =_‚ñ∑_= mean that these constructors are infix
      operators. Thus, the following formula is syntactically valid: =(var 1 ‚ñ∑
      var 0) ‚Üù ‚ä•'=.

      It is often the case that we define priority for our infix operators. The
      following code defines the /infixity/ of =_‚Üù_= and =_‚ñ∑_=
        #+begin_src text
      infixr 20 _‚Üù_
      infixr 50 _‚ñ∑_
        #+end_src
      The higher the number the more priority, hence we can drop the parentheses
      from the previous formula =var 1 ‚ñ∑ var 0 ‚Üù ‚ä•'=. The $r$ in =infixr= stands
      for right associativity.

   We finally add definable operators as Agda functions. For instance, we define
   negation thus:
  #+begin_src text
infix 60 ¬¨'_
¬¨'_ : Fm ‚Üí Fm
¬¨' a = a ‚Üù ‚ä•'
  #+end_src
  We use the symbol =¬¨'= instead of =¬¨= for the same reason we used =‚ä•'= instead
  of =‚ä•=.

** Predicates and relations
   <<sec:predicates>>
   In this section we give a short description on how to represent predicates
   and relations in Agda.

   We define a predicate to have the following type[fn::We leave universe
   polymorphism out for simplicity.]:\glsadd{Pred}
   #+begin_src text
   Pred : Set ‚Üí Set‚ÇÅ
   Pred A = A ‚Üí Set
   #+end_src
   Hence, a predicate on the elements of some type =A= is a function from =A= to
   =Set=.

   Relations follow the same pattern:\glsadd{REL}
   #+begin_src text
   REL : Set ‚Üí Set ‚Üí Set‚ÇÅ
   REL A B = A ‚Üí B ‚Üí Set
   #+end_src
   For homogeneous relations we use the name =Rel=:\glsadd{Rel}
   #+begin_src text
   Rel : Set ‚Üí Set ‚Üí Set‚ÇÅ
   Rel A = REL A A
   #+end_src

   Now consider as an example the natural numbers and the =‚â§= relation, which is
   defined inductively according to the following definition.
   1. For all $a‚àà‚Ñï$ we have $0‚â§a$;
   2. for all $a,b‚àà‚Ñï$ we have that if $a‚â§b$ then also $a+1‚â§b+1$.
   #+begin_src text
   data Nat : Set where
     zero : Nat
     suc : Nat ‚Üí Nat

   data _‚â§_ : Rel Nat where
     z‚â§n : (a : Nat) ‚Üí zero ‚â§ a
     s‚â§s : {a b : Nat} ‚Üí a ‚â§ b ‚Üí suc a ‚â§ suc b
   #+end_src
   Note that =‚â§= is the first indexed type that we present as it is indexed by
   two natural numbers. Keep in mind that =Rel Nat = Nat ‚Üí Nat ‚Üí Set=.
   If =t : a ‚â§ b= we say that =t= is a proof that =a= is less or equal than =b=.

   Let us prove that $1‚â§2$; hence we need to build a term of type =suc zero ‚â§
   suc (suc zero)=.
   #+begin_src text
   1‚â§2 : suc zero ‚â§ suc (suc zero)
   1‚â§2 = s‚â§s (z‚â§n (suc zero))
   #+end_src
   Note that we did not explicitly give parameters =a, b= for the =s‚â§s=
   constructor as they are declared in curly braces[fn::Arguments defined in
   curly braces do not need to be given explicitly so long as Agda can infer its
   values.] and can be inferred by the type =a ‚â§ b=. Note that we could have
   done the same with the argument =a= of =z‚â§n= but we keep it explicit for
   illustrating the difference.

   We can also build proofs recursively. Let us prove that =_‚â§_= is reflexive:
   #+begin_src text
   ‚â§-refl : (a : Nat) ‚Üí a ‚â§ a
   ‚â§-refl zero = z‚â§n zero
   ‚â§-refl (suc a) = s‚â§s (‚â§-refl a)
   #+end_src
   A key feature to notice is that we can name arguments and refer to them in
   subsequent arguments and in the return type. For instance here we have named
   =a= the first argument, which is a natural number. We use the syntax =(a :
   Nat)=. And then we use the name =a= to build the return type, that is: =a ‚â§ a=.

   We can also define the property of transitivity.
   #+begin_src text
   Transitive : {A : Set} ‚Üí Rel A ‚Üí Set
   Transitive R = ‚àÄ {a b c} ‚Üí R a b ‚Üí R b c ‚Üí R a c
   #+end_src
   We see that a proof that some relation is transitive is a function that given
   proofs of =R a b= and =R b c= constructs a proof of =R a c=. Notice that the
   arguments =a b c= are declared implicit as they can be inferred from the types
   =a ‚â§ b= and =b ‚â§ c=. Let us prove that =‚â§= is transitive:
   #+begin_src text
   ‚â§-trans : Transitive _‚â§_
   ‚â§-trans {a} {b} {c} (z‚â§n b) b‚â§c = z‚â§n c
   ‚â§-trans {suc a} {suc b} {suc c} (s‚â§s a‚â§b) (s‚â§s b‚â§c) = s‚â§s (‚â§-trans a‚â§b b‚â§c)
   #+end_src
   The previous proof works as follows. We perform induction on the proof of =a
   ‚â§ b=, that is, the first explicit argument.
   - Case =z‚â§n=; we know that =a = zero= and we can easily build a proof of
     =a ‚â§ c= by using the =z‚â§n= constructor.
   - Case =s‚â§s a‚â§b=; then is must be that the second proof is built using the
     =s‚â§s= constructor since we have =suc b=. Hence we have =a‚â§b : a ‚â§ b= and
     =b‚â§c : b ‚â§ c=. By using a recursive call (induction hypothesis) to
     =‚â§-trans= we can build a proof of =a ‚â§ c=. Finally we can apply the
     constructor =s‚â§s= to obtain a proof of =suc a ‚â§ suc c=.
** Top and bottom
   In Agda we call top (=‚ä§=) to the unit type, i.e. the type with only one
   inhabitant.
   #+begin_src text
   data ‚ä§ : Set where
     tt : ‚ä§
   #+end_src
   For instance, we can define a predicate that is always satisfied thus:
   #+begin_src text
   Trivial : Pred Nat
   Trivial n = ‚ä§
   #+end_src
   It is always satisfied as we can build a proof of =Trivial= for any =n= using
   the =tt= constructor:
   #+begin_src text
   Trivial-n : (n : Nat) ‚Üí Trivial n
   Trivial-n n = tt
   #+end_src

   We call bottom (=‚ä•=) the empty type.
   #+begin_src text
   data ‚ä• : Set where
   #+end_src
   Notice that it has no constructors hence it is impossible to construct a term
   with type =‚ä•=. The bottom type is specially useful to define negation in Agda:
   #+begin_src text
   ¬¨ : Set ‚Üí Set
   ¬¨ A = A ‚Üí ‚ä•
   #+end_src
   The principle of explosion can be trivially proved thus:
   #+begin_src text
   explosion : {A : Set} ‚Üí ‚ä• ‚Üí A
   explosion ()
   #+end_src
   Since the type =‚ä•= has no constructors when we pattern match against the
   argument we get an empty case (denoted by =()=) and thus there is no need to
   provide a term of type =A=.
** Sum types
   We say that a type is a \gls*{sum type} if it is the disjunction of two (or
   more) types.

   In Agda we can define a two options sum type in the following way:
   #+begin_src text
   data _‚äé_ (A B : Set) : Set where
     inj‚ÇÅ : A ‚Üí A ‚äé B
     inj‚ÇÇ : B ‚Üí A ‚äé B
   #+end_src

   For instance, let us prove that every natural is either even or odd:
   #+begin_src text
   even odd : Pred Nat
   even zero = ‚ä§
   even (suc n) =
   #+end_src
** Dependent pairs
    Consider the following non-dependent pair definition (again, we present a non universe
    polymorphic version for simplicity):
    #+begin_src text
data _√ó_ (A B : Set) : Set where
  _,_ : A ‚Üí B ‚Üí A √ó B
    #+end_src
    Notice that =_√ó_= is a parameterized type as it has parameters =(A B :
    Set)=, which are the types of each component of the pair. Parameters are
    shared parameters by all constructors (in this case there is only one
    constructor).

    See that we can easily build a pair $‚ü®0,1‚ü©$ thus:
    #+begin_src text
    p : Nat √ó Nat
    p = zero , (suc zero)
    #+end_src

    We now introduce the notion of \glspl*{dependent-pair}, also called
    \(Œ£\)-pairs. Consider the following definition.
    #+begin_src text
data Œ£ (A : Set) (B : A ‚Üí Set) : Set where
  _,_ : (a : A) ‚Üí (b : B a) ‚Üí Œ£ A B
    #+end_src
    The only, although essential, difference, is that the type of the second
    parameter is indexed by the value of the first. This is specially useful to
    represent existential quantification. For instance, we can design a type
    that asserts that some predicate is satisfiable[fn::we could simply write
    =P= instead of =(Œª a ‚Üí P a)= since eta-reductions are valid in Agda.]:
    #+begin_src text
    Satisfiable : {A : Set} ‚Üí Pred A ‚Üí Set
    Satisfiable {A} P = Œ£ A (Œª a ‚Üí P a)
    #+end_src
    For instance:
    #+begin_src text
    TODO: show meaningful example of dependent pair
    #+end_src

    It useful to define the projection of each component:
    #+begin_src text
    proj‚ÇÅ : {A : Set} {B : A ‚Üí Set} ‚Üí Œ£ A B ‚Üí A
    proj‚ÇÅ (a , b) = a

    proj‚ÇÇ : {A : Set} {B : A ‚Üí Set} ‚Üí (p : Œ£ A B) ‚Üí B (proj‚ÇÅ p)
    proj‚ÇÇ (a , b) = b
    #+end_src
** Noetherian relations
    We say that a relation is \gls*{noetherian} if it is conversely
    well-founded. We begin by formalizing the concept of infinite ascending
    chain in Agda.
    #+begin_src text
InfAscChain : {W : Set} ‚Üí (_‚àº_ : Rel W) ‚Üí Set‚ÇÅ
InfAscChain {W} _‚àº_ =
  Œ£ ({a b : W} ‚Üí R a b ‚Üí Set) Œª f
  ‚Üí Œ£ (W √ó W) Œª {(a , b)
  ‚Üí (R a b) , (f a b) ,
  (‚àÄ a' b' ‚Üí (Ra'b' : R a' b') ‚Üí f Ra'b' ‚Üí Œ£ W Œª c ‚Üí (Œ£ (R b' c) f))}
    #+end_src
    In words the previous type defines an infinite ascending chain on
    some relation =R= with domain =W= as:
    1. A label function =f= that for any =a,b=, maps a proof of =R a b= to a
       type. This is used to carry additional information that may be necessary
       to build the infinite chain.
    2. A pair of starting values =a,b= of type =W=. A proof of =R a b= and a
       proof of =f a b=.
    3. A function that for any =a',b'= and a proof of =R a' b'= and =f a' b'=,
       finds some =c= and builds a proof of =R b' c= and =f b' c=.

    To see an example refer to the proof of soundness for J5 (pending).
** Ordinary semantics
   In this section we explain how we have represented ordinary Veltman semantics
   in Agda.

   To represent ordinary Veltman semantics in Agda, the first step is to
   define the type of an ordinary Veltman frame:
   #+begin_src text
record Frame : Set‚ÇÅ where
  constructor frame
  field
    W : Set
    witness : W
    R : Rel W lzero
    S : Rel‚ÇÉ W lzero
    R-trans : Transitive R
    R-noetherian : Noetherian R
    Sw‚äÜR[w]¬≤ : ‚àÄ {w u v} ‚Üí S w u v ‚Üí R w u √ó R w v
    Sw-refl : ‚àÄ {w u} ‚Üí R w u ‚Üí S w u u
    Sw-trans : ‚àÄ {w} ‚Üí Transitive (S w)
    R-Sw-trans : ‚àÄ {w u v} ‚Üí R w u ‚Üí R u v ‚Üí S w u v
   #+end_src
   The keyword =record= is used to define a new product type (a tuple) in which
   each component (or field) has a name.

   The first component, =W=, corresponds to the type of the worlds in the frame.
   The second component, =witness= is required to make sure that the set of
   worlds is not empty. The =R= and =S= components are the relations. The
   remaining components are the properties that must be satisfied according to
   definition [[def:ordinary-frames]]. Notice the =lzero= in the type of =R= and =S=
   which restricts this relations to be in the 0 level of the universe hierarchy
   (i.e. =R= has type =W ‚Üí W ‚Üí Set‚ÇÄ=, see [[sec:universe-hierarchy]]) as making them
   universe polymorphic has no gains for the purposes of this work and it would
   make code harder to read.

   We define a valuation on a frame thus:
   #+begin_src text
Valuation : Frame ‚Üí Set‚ÇÅ
Valuation F = REL W Var lzero
  where open Frame F
   #+end_src

   And then we define a model to be a tuple of a frame and a valuation on that
   frame.
   #+begin_src text
record Model : Set‚ÇÅ where
  constructor model
  field
    F : Frame
    V : Valuation F
   #+end_src

   Our next step is to define the forcing relation.
   #+begin_src text
data _,_‚ä©_ (M : Model) (w : MW M) : Fm ‚Üí Set where
   ...
   #+end_src
   We set a model and a world of that model as parameters as they should be
   shared by all constructors. We leave the formula as an index as it may vary
   depending on the constructor. We should introduce a constructor for each case
   in definition [[def:ord-forcing]]:[fn::we have slightly
   simplified the types of the constructors below to make them more readable.]
   1. We do not need a constructor for =‚ä•'= as its absence implicitly implies that
      we can never build an instance of =M , w ‚ä© ‚ä•'= regardless of =M= and =w=.
   2. if $x‚ààVar$, then $w‚ä©x$ iff $‚ü®w,x‚ü©‚ààV$;
      #+begin_src text
  var : {x : Var} ‚Üí V w x ‚Üí M , w ‚ä© var x
      #+end_src
   3. if $A,B‚ààFm$, then $w‚ä©A‚ÜíB$ iff if $w‚ä©A$ then $w‚ä©B$;
      #+begin_src text
  impl : {A B : Fm} ‚Üí ((M , w ‚ä© A) ‚Üí (M , w ‚ä© B)) ‚Üí M , w ‚ä© (A ‚Üù B)
      #+end_src
   4. if $A,B‚ààFm$, then $w‚ä©A‚ñ∑B$ iff if $wRu$ and $u‚ä©A$ then there exists $v$ such
      that $v‚ä©B$ and $uS_wv$.
      #+begin_src text
   rhd : {A B : Fm} ‚Üí
     ({u : W} ‚Üí R w u ‚Üí M , u ‚ä© A ‚Üí (Œ£ W Œª v ‚Üí S w u v √ó (M , v ‚ä© B)))
     ‚Üí M , w ‚ä© A ‚ñ∑ B
      #+end_src

   Unfortunately the definition above is not valid in Agda. The reason is that
   constructors =rhd= and =impl= both fail the positivity check (see
   [[sec:positivity]]). For instance, see that in the =impl= constructor we have
   =(M , w ‚ä© A)= on the left of an arrow =‚Üí=.

   We have circumvented this problem by providing mutually recursive definitions
   for /forcing/ (=_,_‚ä©_=) and /not forcing/ (=_,_‚äÆ_=).

   The type definition without the constructors is as follows.
   #+begin_src text
   data _,_‚äÆ_ (M : Model) (w : MW M) : Fm ‚Üí Set
   data _,_‚ä©_ (M : Model) (w : MW M) : Fm ‚Üí Set
   #+end_src

   Next we provide the strictly positive types of each constructor of the
   =_,_‚ä©_= and =_,_‚äÆ_= relations.
   1. For the =‚ä•'= constant.
      1. Forcing (=_,_‚ä©_=). No constructor is required.
      2. Not forcing (=_,_‚äÆ_=).
        #+begin_example
        bot : M , w ‚äÆ ‚ä•'
        #+end_example
   2. For variables.
    1. Forcing (=_,_‚ä©_=).
       #+begin_src text
  var : {x : Var} ‚Üí V w x ‚Üí M , w ‚ä© var x
       #+end_src
    2. Not forcing (=_,_‚äÆ_=).
       #+begin_example
  var : {x : Var} ‚Üí ¬¨ (V w x) ‚Üí M , w ‚äÆ var x
       #+end_example

   3. For implication (=‚Üù=).
    1. Forcing (=_,_‚ä©_=).
       #+begin_src text
  impl : {A B : Fm} ‚Üí M , w ‚äÆ A ‚äé M , w ‚ä© B ‚Üí M , w ‚ä© A ‚Üù B
       #+end_src
    2. Not forcing (=_,_‚äÆ_=).
       #+begin_src text
  impl : {A B : Fm} ‚Üí M , w ‚ä© A ‚Üí M , w ‚äÆ B ‚Üí M , w ‚äÆ A ‚Üù B
       #+end_src
   4. For interpretability (=‚ñ∑=).
    1. Forcing (=_,_‚ä©_=).
       #+begin_src text
  rhd : {A B : Fm} ‚Üí
    (‚àÄ {u} ‚Üí R w u ‚Üí M , u ‚äÆ A ‚äé (Œ£ W Œª v ‚Üí S w u v √ó M , v ‚ä© B))
    ‚Üí M , w ‚ä© A ‚ñ∑ B
       #+end_src
    2. Not forcing (=_,_‚äÆ_=).
       #+begin_src text
  rhd : {A B : Fm} ‚Üí
    Œ£ W (Œª u ‚Üí R w u √ó M , u ‚ä© A √ó ((v : W) ‚Üí (¬¨ S w u v) ‚äé M , v ‚äÆ B))
    ‚Üí M , w ‚äÆ A ‚ñ∑ B
       #+end_src

   Putting it all together results in the following definitions:
   #+begin_src text
data _,_‚ä©_ M w where
  var : {x : Var} ‚Üí V w x ‚Üí M , w ‚ä© var x
  impl : {A B : Fm} ‚Üí M , w ‚äÆ A ‚äé M , w ‚ä© B ‚Üí M , w ‚ä© A ‚Üù B
  rhd : {A B : Fm} ‚Üí
    (‚àÄ {u} ‚Üí R w u ‚Üí M , u ‚äÆ A ‚äé (Œ£ W Œª v ‚Üí S w u v √ó M , v ‚ä© B))
    ‚Üí M , w ‚ä© A ‚ñ∑ B
   #+end_src
   #+begin_src text
data _,_‚äÆ_ M w where
  var : {x : Var} ‚Üí ¬¨ (V w x) ‚Üí M , w ‚äÆ var a
  impl : {A B : Fm} ‚Üí M , w ‚ä© A ‚Üí M , w ‚äÆ B ‚Üí M , w ‚äÆ A ‚Üù B
  rhd : {A B : Fm} ‚Üí
    Œ£ W (Œª u ‚Üí R w u √ó M , u ‚ä© A √ó ((v : W) ‚Üí (¬¨ S w u v) ‚äé M , v ‚äÆ B))
    ‚Üí M , w ‚äÆ A ‚ñ∑ B
  bot : M , w ‚äÆ ‚ä•'
   #+end_src

   To prove that =_,_‚ä©= and =_,_‚äÆ= are indeed the negation of each other
   we should prove two lemmas; in Agda types[fn::=A ‚áî B ‚âî A ‚Üí B √ó B ‚Üí A=]:
   {{{beginlemma}}}
   <<lemma:forcing-neg>>
   \hfill
   1. =‚àÄ {M w A} ‚Üí M , w ‚ä© A ‚áî ¬¨ (M , w ‚äÆ A)=.
   2. =‚àÄ {M w A} ‚Üí ¬¨ (M , w ‚ä© A) ‚áî M , w ‚äÆ A=.
   {{{endlemma}}} For lemma 1 we can prove $‚áí$ and for lemma 2 we can prove $‚áê$
   (see lemma [[lemma:equiv]]). However, it is not possible to prove the remaining
   directions. In general terms, this is due to the fact that in Agda (and in
   intuitionistic logic in general) we can prove that =(¬¨ A ‚äé B) ‚Üí A ‚Üí B= but we
   cannot prove =A ‚Üí B ‚Üí (¬¨ A ‚äé B)=. The reason being that we lack the law of
   excluded middle, as it is a non-constructive axiom. In order to prove the
   remaining directions we need to assume that the forcing relation is
   decidable.

   {{{begindef}}} We say that =M= is \gls*{decidable model} if for any world =w= and
   formula =A= we have that either =M , w ‚ä© A= or =M , w ‚äÆ A=.

   In Agda terms:
   #+begin_src text
DecidableModel : Model ‚Üí Set
DecidableModel M = ‚àÄ w A ‚Üí M , w ‚ä© A ‚äé M , w ‚äÆ A
   #+end_src
   {{{enddef}}}

   {{{beginproof}}}
   {{{agda}}}

   Under the assumption that we restrict ourselves to decidable models we can
   prove lemma [[lemma:forcing-neg]].
   {{{endproof}}}

   {{{beginlemma}}} <<lemma:equiv>> The following is true[fn::Note that =MR M=
   is the =R= of the frame on which the model =M= is based. We give analogous
   definitions to =MW= and =MS=.]:

   1. =‚ä©‚ä• : ‚àÄ {M w} ‚Üí ¬¨ (M , w ‚ä© ‚ä•')=;
   2. =‚äÆ‚Üí¬¨‚ä© : ‚àÄ {M w A} ‚Üí M , w ‚äÆ A ‚Üí ¬¨ (M , w ‚ä© A)=;
   3. =‚ä©‚Üí¬¨‚äÆ : ‚àÄ {M w A} ‚Üí M , w ‚ä© A ‚Üí ¬¨ (M , w ‚äÆ A)=;
   4. =‚ä©MP : ‚àÄ {M w A B} ‚Üí M , w ‚ä© A ‚Üù B ‚Üí M , w ‚ä© A ‚Üí M , w ‚ä© B=;
   5. =‚ä©¬¨ : ‚àÄ {M w A} ‚Üí (M , w ‚ä© ¬¨' A) ‚áî (M , w ‚äÆ A)=;
   6. =‚äÆ¬¨ : ‚àÄ {M w A} ‚Üí M , w ‚äÆ ¬¨' A ‚áî M , w ‚ä© A=;
   7. =‚ä©¬¨¬¨ : ‚àÄ {M w A} ‚Üí M , w ‚ä© ¬¨' ¬¨' A ‚áî M , w ‚ä© A=;
   8. =‚äÆ¬¨¬¨ : ‚àÄ {M w A} ‚Üí M , w ‚äÆ ¬¨' ¬¨' A ‚áî M , w ‚äÆ A=;
   9. =‚ä©‚àß : ‚àÄ {M w A B} ‚Üí M , w ‚ä© A ‚àß B ‚áî (M , w ‚ä© A √ó M , w ‚ä© B)=;
   10. =‚äÆ‚àß : ‚àÄ {M w A B} ‚Üí M , w ‚äÆ A ‚àß B ‚áî (M , w ‚äÆ A ‚äé M , w ‚äÆ B)=;
   11. =‚ä©‚à® : ‚àÄ {M w A B} ‚Üí M , w ‚ä© A ‚à® B ‚áî (M , w ‚ä© A ‚äé M , w ‚ä© B)=;
   12. =‚ä©‚ñ° : ‚àÄ {M w A} ‚Üí M , w ‚ä© ‚ñ° A ‚áî (‚àÄ {v} ‚Üí MR M w v ‚Üí M , v ‚ä© A)=;
   13. =‚äÆ‚ñ° : ‚àÄ {M w A} ‚Üí M , w ‚äÆ ‚ñ° A ‚áî (Œ£ (MW M) Œª u ‚Üí MR M w u √ó M , u ‚äÆ A)=;
   14. =‚ä©‚ô¢ : ‚àÄ {M w A} ‚Üí M , w ‚ä© ‚ô¢ A ‚áî (Œ£ (MW M) Œª u ‚Üí MR M w u √ó M , u ‚ä© A)=;
   15. =‚äÆ‚ô¢ : ‚àÄ {M w A} ‚Üí M , w ‚äÆ ‚ô¢ A ‚áî (‚àÄ {u} ‚Üí MR M w u ‚Üí M , u ‚äÆ A)=;
   16. =‚ä©‚Üù‚á® : ‚àÄ {M w A B} ‚Üí M , w ‚ä© A ‚Üù B ‚Üí M , w ‚ä© A ‚Üí M , w ‚ä© B=;
   17. =‚ä©‚ñ∑‚á® : ‚àÄ {M w A B} ‚Üí M , w ‚ä© A ‚ñ∑ B ‚Üí (‚àÄ {u} ‚Üí MR M w u ‚Üí M , u ‚ä© A ‚Üí Œ£ (MW M) Œª v ‚Üí (MS M) w u v √ó M , v ‚ä© B)=.
   {{{endlemma}}}
   {{{beginproof}}} {{{agda}}} All of the above has been proven
   in Agda without assuming that the model is decidable. {{{endproof}}}


   {{{beginlemma}}} <<lemma:ord-equiv-dec>> A series of equivalences that can be proven for decidable
   models.

   1. =‚ä©‚Üù : ‚àÄ {w A B} ‚Üí M , w ‚ä© A ‚Üù B ‚áî (M , w ‚ä© A ‚Üí M , w ‚ä© B)=;
   2. =‚ä©‚ñ∑ : ‚àÄ {w A B} ‚Üí M , w ‚ä© A ‚ñ∑ B ‚áî
      (‚àÄ {u} ‚Üí MR M w u ‚Üí M , u ‚ä© A ‚Üí Œ£ (MW M) Œª v ‚Üí (MS M) w u v √ó M , v ‚ä© B)=;
   3. =‚ä©‚áî¬¨‚äÆ : ‚àÄ {w A} ‚Üí M , w ‚ä© A ‚áî (¬¨ M , w ‚äÆ A)=;
   4. =‚äÆ‚áî¬¨‚ä© : ‚àÄ {w A} ‚Üí M , w ‚äÆ A ‚áî (¬¨ M , w ‚ä© A)=.
   {{{endlemma}}} {{{beginproof}}} {{{agda}}} Note that we only need the
   decidability assumption for 1 ($‚áê$), 2 ($‚áê$), 3 ($‚áê$) and 4 ($‚áê$). {{{endproof}}}

   From now on, we always restrict ourselves to decidable models as the usage of
   lemma [[lemma:ord-equiv-dec]] is ubiquitous. If we were to assume that we are
   outside of Agda and that we accept the law of excluded middle as part of our
   metalogic, the mentioned assumption could be dropped.

** IL and syntactic proofs
** Subsets (predicates revisited)
   \glsadd{Pred}
   In Agda, the keyword =Set= refers to an Agda type (insert ref to previous
   section), which is the closest concept to regular mathematics /set/. In this
   section when we say /set/ we refer to a subset of an Agda type. The most
   natural way to represent subsets in Agda is to use predicates. See
   [[sec:predicates]] for an introduction. A predicate represents the characteristic
   function of the associated subset. For instance consider the predicate:
   #+begin_src text
   even : Pred Nat
   even = ...
   #+end_src
   Then =even= represents the subset of natural numbers that are even. It is
   important to note that predicates are always restricted to a specific type,
   in this case =Nat=, and for that reason the term /subset/ may be more adequate.

   Next we present how we represent in Agda common operations on sets.
   Assume for the below definitions that we have some =A : Set= in scope.
   1. \boxed{‚àà} A proof of membership is a simple function application.
      #+begin_src text
      _‚àà_ : REL A (Pred A)
      a ‚àà X = X a
      #+end_src
      This definition is mostly superfluous but it helps to have a syntax closer
      to regular mathematics.
   2. \boxed{‚àâ} A proof of non membership is function from a proof of membership to =‚ä•=.
      #+begin_src text
      _‚àâ_ : REL A (Pred A)
      a ‚àâ X = ¬¨ (a ‚àà X)
      #+end_src
   3. \boxed{‚äÜ} A proof of inclusion =X ‚äÜ Y= is a function that maps a proof of
      membership to =X= to a proof of membership to =Y=.
      #+begin_example
      _‚äÜ_ : Rel (Pred A)
      X ‚äÜ Y = ‚àÄ {x} ‚Üí x ‚àà X ‚Üí x ‚àà Y
      #+end_example
   4. \boxed{‚à©} We use pairs to represent the intersection. Each component is a
      proof of membership to =X= and =Y= respectively.
      #+begin_src text
      _‚à©_ : Pred A ‚Üí Pred A ‚Üí Pred A
      X ‚à© Y = Œª x ‚Üí x ‚àà X √ó x ‚àà Y
      #+end_src
   5. \boxed{‚à™} We use a sum type to represent the union.
      #+begin_src text
      _‚à™_ : Pred A ‚Üí Pred A ‚Üí Pred A
      X ‚à™ Y = Œª x ‚Üí x ‚àà X ‚äé x ‚àà Y
      #+end_src
   6. \boxed{‚àÖ}
      The empty set is represented by a characteristic constant function to =‚ä•=.
      #+begin_src text
      ‚àÖ : Pred A
      ‚àÖ = Œª x ‚Üí ‚ä•
      #+end_src
   7. \boxed{ùüè}
      Similarly, the universe set is represented by a characteristic constant function to =‚ä§=.
      #+begin_src text
      U : Pred A
      U = Œª x ‚Üí ‚ä§
      #+end_src
   8. \(\boxed{\{x\}}\) A singleton set is defined using equality (TODO: define
      equality in Agda).
      #+begin_example
      ÔΩõ_ÔΩù : A ‚Üí Pred A
      ÔΩõ x ÔΩù = Œª y ‚Üí x ‚â° y
      #+end_example
** Generalized semantics
   In this section we explain how we have represented generalized Veltman
   semantics in Agda.

   Analogously to ordinary semantics we start by defining a frame:

   #+begin_src text
record Frame {‚Ñì} : Set (lsuc ‚Ñì) where
  constructor frame
  field
    W : Set
  ùïé : Set‚ÇÅ
  ùïé = Pred W lzero
  field
    witness : W
    R : Rel W lzero
    S : REL‚ÇÉ W W ùïé lzero
    Swu-sat : ‚àÄ {w u Y} ‚Üí S w u Y ‚Üí Satisfiable Y
    R-trans : Transitive R
    R-noetherian : Noetherian {‚Ñì} R
    Sw‚äÜR[w] : ‚àÄ {w u Y} ‚Üí S w u Y ‚Üí R w u
    SwuY‚äÜR[w] : ‚àÄ {w u Y} ‚Üí S w u Y ‚Üí ‚àÄ {y} ‚Üí y ‚àà Y ‚Üí R w y
    S-quasirefl : ‚àÄ {w u} ‚Üí R w u ‚Üí S w u ÔΩõ u ÔΩù
    S-quasitrans : ‚àÄ {w u V} ‚Üí S w u V ‚Üí (f : ‚àÄ {v} ‚Üí v ‚àà V ‚Üí Œ£ ùïé Œª Z ‚Üí S w v Z)
      ‚Üí S w u Œª {x ‚Üí Œ£ W Œª v ‚Üí Œ£ (v ‚àà V) Œª v‚ààV ‚Üí x ‚àà proj‚ÇÅ (f v‚ààV)}
    R-Sw-trans : ‚àÄ {w u v} ‚Üí R w u ‚Üí R u v ‚Üí S w u ÔΩõ v ÔΩù
    S-monotone : ‚àÄ {w u} {V Z : ùïé} ‚Üí S w u V ‚Üí V ‚äÜ Z ‚Üí Z ‚äÜ R w ‚Üí S w u Z
   #+end_src

   Notice that just below the definition of the field =W : Set=, we have introduced a
   definition of the type =ùïé : Set‚ÇÅ=

* tmp


* other

\printglossary

\printbibliography[
heading=bibintoc,
title=Bibliography
]


* Appendix
  :PROPERTIES:
  :END:
  All the Agda code goes here.
